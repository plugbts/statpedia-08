{
  "version": 3,
  "sources": ["../bundle-5tAbBl/checked-fetch.js", "../bundle-5tAbBl/strip-cf-connecting-ip-header.js", "wrangler-modules-watch:wrangler:modules-watch", "../../../node_modules/wrangler/templates/modules-watch-stub.js", "../../../src/lib/api.ts", "../../../src/lib/extract.ts", "../../../src/supabaseFetch.ts", "../bundle-5tAbBl/middleware-loader.entry.ts", "../bundle-5tAbBl/middleware-insertion-facade.js", "../../../src/worker.ts", "../../../src/jobs/multiBackfill.ts", "../../../src/jobs/backfill.ts", "../../../src/helpers.ts", "../../../src/createPlayerPropsFromOdd.ts", "../../../src/missingPlayers.ts", "../../../src/playersLoader.ts", "../../../src/normalizeName.ts", "../../../src/config/leagues.ts", "../../../src/jobs/ingest.ts", "../../../node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../../../node_modules/wrangler/templates/middleware/common.ts"],
  "sourceRoot": "/Users/jackie/statpedia-08/cloudflare-worker/.wrangler/tmp/dev-CGJgac",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "function stripCfConnectingIPHeader(input, init) {\n\tconst request = new Request(input, init);\n\trequest.headers.delete(\"CF-Connecting-IP\");\n\treturn request;\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\treturn Reflect.apply(target, thisArg, [\n\t\t\tstripCfConnectingIPHeader.apply(null, argArray),\n\t\t]);\n\t},\n});\n", "", "// `esbuild` doesn't support returning `watch*` options from `onStart()`\n// plugin callbacks. Instead, we define an empty virtual module that is\n// imported by this injected file. Importing the module registers watchers.\nimport \"wrangler:modules-watch\";\n", "// Resilient Event Fetcher with Fallback Strategies\n// Always returns events/props even if primary query is empty\n\nfunction buildUrl(base: string, params: Record<string, string | number | boolean | undefined>) {\n  const u = new URL(base);\n  Object.entries(params)\n    .filter(([, v]) => v !== undefined && v !== null && v !== \"\")\n    .forEach(([k, v]) => u.searchParams.set(k, String(v)));\n  return u.toString();\n}\n\nexport async function fetchEventsWithProps(env: any, leagueID: string, opts?: {\n  dateFrom?: string;\n  dateTo?: string;\n  season?: number;\n  oddIDs?: string;\n  limit?: number;\n}) {\n  const base = \"https://api.sportsgameodds.com/v2/events\";\n  const url = buildUrl(base, {\n    apiKey: env.SPORTSGAMEODDS_API_KEY,\n    leagueID,\n    oddsAvailable: true,\n    dateFrom: opts?.dateFrom,\n    dateTo: opts?.dateTo,\n    season: opts?.season,\n    oddIDs: opts?.oddIDs,\n    limit: opts?.limit ?? 250,\n  });\n  \n  console.log(`\uD83D\uDD0D Fetching: ${url}`);\n  \n  try {\n    const res = await fetch(url);\n    if (!res.ok) {\n      const errorText = await res.text();\n      throw new Error(`Events fetch failed (${res.status}): ${errorText}`);\n    }\n    \n    const response = await res.json();\n    \n    // Handle the wrapper structure: { success: true, data: [...events] }\n    const events = response.data || response;\n    const eventsArray = Array.isArray(events) ? events : [];\n    \n    console.log(`\u2705 Fetched ${eventsArray.length} events for ${leagueID}`);\n    return eventsArray;\n    \n  } catch (error) {\n    console.error(`\u274C API fetch error for ${leagueID}:`, error);\n    throw error;\n  }\n}\n\n// Helper functions for date manipulation\nfunction ymd(d: Date): string { \n  return d.toISOString().slice(0, 10); \n}\n\nfunction addDays(d: Date, n: number): Date { \n  const x = new Date(d); \n  x.setUTCDate(x.getUTCDate() + n); \n  return x; \n}\n\nexport async function getEventsWithFallbacks(env: any, leagueID: string, season: number, oddIDs?: string): Promise<{ events: any[]; tier: number }> {\n  const today = new Date();\n  const d7Past = ymd(addDays(today, -7));\n  const d7Future = ymd(addDays(today, +7));\n  const d14Past = ymd(addDays(today, -14));\n  const d14Future = ymd(addDays(today, +14));\n\n  console.log(`\uD83D\uDD04 Starting fallback strategy for ${leagueID} ${season}`);\n\n  // Tier 1: Current season, \u00B17 days\n  try {\n    console.log(`Tier 1: ${leagueID} ${season} (\u00B17 days)`);\n    let events = await fetchEventsWithProps(env, leagueID, { \n      season, \n      dateFrom: d7Past, \n      dateTo: d7Future, \n      oddIDs \n    });\n    if (events?.length) {\n      console.log(`\u2705 Tier 1 success: ${events.length} events`);\n      return { events, tier: 1 };\n    }\n  } catch (error) {\n    console.warn(`\u26A0\uFE0F Tier 1 failed for ${leagueID}:`, error.message);\n  }\n\n  // Tier 2: Current season, \u00B114 days\n  try {\n    console.log(`Tier 2: ${leagueID} ${season} (\u00B114 days)`);\n    let events = await fetchEventsWithProps(env, leagueID, { \n      season, \n      dateFrom: d14Past, \n      dateTo: d14Future, \n      oddIDs \n    });\n    if (events?.length) {\n      console.log(`\u2705 Tier 2 success: ${events.length} events`);\n      return { events, tier: 2 };\n    }\n  } catch (error) {\n    console.warn(`\u26A0\uFE0F Tier 2 failed for ${leagueID}:`, error.message);\n  }\n\n  // Tier 3: Previous season, \u00B114 days\n  try {\n    console.log(`Tier 3: ${leagueID} ${season - 1} (\u00B114 days)`);\n    let events = await fetchEventsWithProps(env, leagueID, { \n      season: season - 1, \n      dateFrom: d14Past, \n      dateTo: d14Future, \n      oddIDs \n    });\n    if (events?.length) {\n      console.log(`\u2705 Tier 3 success: ${events.length} events`);\n      return { events, tier: 3 };\n    }\n  } catch (error) {\n    console.warn(`\u26A0\uFE0F Tier 3 failed for ${leagueID}:`, error.message);\n  }\n\n  // Tier 4: Current season, \u00B114 days, no oddIDs filter\n  try {\n    console.log(`Tier 4: ${leagueID} ${season} (\u00B114 days, no oddIDs)`);\n    let events = await fetchEventsWithProps(env, leagueID, { \n      season, \n      dateFrom: d14Past, \n      dateTo: d14Future \n    });\n    if (events?.length) {\n      console.log(`\u2705 Tier 4 success: ${events.length} events`);\n      return { events, tier: 4 };\n    }\n  } catch (error) {\n    console.warn(`\u26A0\uFE0F Tier 4 failed for ${leagueID}:`, error.message);\n  }\n\n  // Tier 5: Previous season, \u00B114 days, no oddIDs filter\n  try {\n    console.log(`Tier 5: ${leagueID} ${season - 1} (\u00B114 days, no oddIDs)`);\n    let events = await fetchEventsWithProps(env, leagueID, { \n      season: season - 1, \n      dateFrom: d14Past, \n      dateTo: d14Future \n    });\n    if (events?.length) {\n      console.log(`\u2705 Tier 5 success: ${events.length} events`);\n      return { events, tier: 5 };\n    }\n  } catch (error) {\n    console.warn(`\u26A0\uFE0F Tier 5 failed for ${leagueID}:`, error.message);\n  }\n\n  console.warn(`\u274C All fallback tiers failed for ${leagueID} ${season}`);\n  return { events: [], tier: 0 };\n}\n\n// Enhanced fallback with more aggressive strategies\nexport async function getEventsWithAggressiveFallbacks(env: any, leagueID: string, season: number, oddIDs?: string): Promise<{ events: any[]; tier: number }> {\n  // Try the standard fallbacks first\n  const standardResult = await getEventsWithFallbacks(env, leagueID, season, oddIDs);\n  if (standardResult.events.length > 0) {\n    return standardResult;\n  }\n\n  // Additional aggressive fallbacks\n  const today = new Date();\n  const d30Past = ymd(addDays(today, -30));\n  const d30Future = ymd(addDays(today, +30));\n  const d90Past = ymd(addDays(today, -90));\n  const d90Future = ymd(addDays(today, +90));\n\n  // Tier 6: Current season, \u00B130 days\n  try {\n    console.log(`Tier 6: ${leagueID} ${season} (\u00B130 days)`);\n    let events = await fetchEventsWithProps(env, leagueID, { \n      season, \n      dateFrom: d30Past, \n      dateTo: d30Future, \n      oddIDs \n    });\n    if (events?.length) {\n      console.log(`\u2705 Tier 6 success: ${events.length} events`);\n      return { events, tier: 6 };\n    }\n  } catch (error) {\n    console.warn(`\u26A0\uFE0F Tier 6 failed for ${leagueID}:`, error.message);\n  }\n\n  // Tier 7: Current season, \u00B190 days\n  try {\n    console.log(`Tier 7: ${leagueID} ${season} (\u00B190 days)`);\n    let events = await fetchEventsWithProps(env, leagueID, { \n      season, \n      dateFrom: d90Past, \n      dateTo: d90Future, \n      oddIDs \n    });\n    if (events?.length) {\n      console.log(`\u2705 Tier 7 success: ${events.length} events`);\n      return { events, tier: 7 };\n    }\n  } catch (error) {\n    console.warn(`\u26A0\uFE0F Tier 7 failed for ${leagueID}:`, error.message);\n  }\n\n  // Tier 8: Previous season, \u00B190 days\n  try {\n    console.log(`Tier 8: ${leagueID} ${season - 1} (\u00B190 days)`);\n    let events = await fetchEventsWithProps(env, leagueID, { \n      season: season - 1, \n      dateFrom: d90Past, \n      dateTo: d90Future, \n      oddIDs \n    });\n    if (events?.length) {\n      console.log(`\u2705 Tier 8 success: ${events.length} events`);\n      return { events, tier: 8 };\n    }\n  } catch (error) {\n    console.warn(`\u26A0\uFE0F Tier 8 failed for ${leagueID}:`, error.message);\n  }\n\n  // Tier 9: No date filters, current season\n  try {\n    console.log(`Tier 9: ${leagueID} ${season} (no date filters)`);\n    let events = await fetchEventsWithProps(env, leagueID, { \n      season, \n      oddIDs \n    });\n    if (events?.length) {\n      console.log(`\u2705 Tier 9 success: ${events.length} events`);\n      return { events, tier: 9 };\n    }\n  } catch (error) {\n    console.warn(`\u26A0\uFE0F Tier 9 failed for ${leagueID}:`, error.message);\n  }\n\n  // Tier 10: No date filters, previous season\n  try {\n    console.log(`Tier 10: ${leagueID} ${season - 1} (no date filters)`);\n    let events = await fetchEventsWithProps(env, leagueID, { \n      season: season - 1, \n      oddIDs \n    });\n    if (events?.length) {\n      console.log(`\u2705 Tier 10 success: ${events.length} events`);\n      return { events, tier: 10 };\n    }\n  } catch (error) {\n    console.warn(`\u26A0\uFE0F Tier 10 failed for ${leagueID}:`, error.message);\n  }\n\n  console.warn(`\u274C All aggressive fallback tiers failed for ${leagueID} ${season}`);\n  return { events: [], tier: 0 };\n}\n", "// Player Props Extraction with Schema Normalization\n// Normalizes upstream event schema into ingest shape\n\nexport interface ExtractedPlayerProp {\n  playerName: string;\n  playerId?: string | null;\n  marketName: string;\n  line: number | null;\n  odds: number | null;\n  sportsbook: string;\n  eventStartUtc: string;\n  league: string;\n  eventId: string;\n  marketId: string;\n  oddId: string;\n  overUnder: string; // 'over' or 'under'\n  rawData?: any; // Store raw data for debugging\n}\n\nexport function extractPlayerProps(events: any[]): ExtractedPlayerProp[] {\n  const out: ExtractedPlayerProp[] = [];\n  \n  console.log(`\uD83D\uDD0D Extracting player props from ${events?.length || 0} events`);\n  \n  for (const ev of events || []) {\n    if (!ev) continue;\n    \n    const eventId = ev.id || ev.eventID || ev.event_id || 'unknown';\n    const league = ev.leagueID || ev.league || ev.league_id || 'unknown';\n    const eventStartUtc = ev.startTime || ev.commence_time || ev.startUtc || ev.date || new Date().toISOString();\n    \n    // Handle the actual API structure: ev.odds contains all the player props\n    const oddsData = ev?.odds || {};\n    \n    // Iterate through all odds entries\n    for (const [oddId, oddData] of Object.entries(oddsData)) {\n      if (!oddData || typeof oddData !== 'object') continue;\n      \n      const odd = oddData as any;\n      \n      // Check if this is a player prop (has playerID and statID)\n      if (!odd.playerID || !odd.statID) continue;\n      \n      // Extract player information from the players object\n      const playerInfo = ev?.players?.[odd.playerID];\n      const playerName = playerInfo?.name || odd.playerID || 'Unknown Player';\n      const playerId = odd.playerID;\n      \n      // Extract market information\n      const marketName = odd.marketName || `${odd.statID} ${odd.betTypeID}`;\n      \n      // Extract line/threshold (for over/under bets)\n      let line = null;\n      if (odd.fairOverUnder) {\n        line = parseFloat(odd.fairOverUnder);\n      } else if (odd.bookOverUnder) {\n        line = parseFloat(odd.bookOverUnder);\n      }\n      \n      // Extract odds\n      const odds = odd.bookOdds || odd.fairOdds || null;\n      const oddsValue = odds ? parseInt(odds.replace('+', '').replace('-', '')) : null;\n      \n      // Extract sportsbook from byBookmaker\n      let sportsbook = 'Consensus';\n      if (odd.byBookmaker && typeof odd.byBookmaker === 'object') {\n        const bookmakers = Object.keys(odd.byBookmaker);\n        if (bookmakers.length > 0) {\n          sportsbook = bookmakers[0]; // Use first available sportsbook\n        }\n      }\n      \n      // Determine over/under\n      let overUnder = 'over';\n      if (odd.sideID === 'under') {\n        overUnder = 'under';\n      } else if (odd.sideID === 'yes') {\n        overUnder = 'yes';\n      } else if (odd.sideID === 'no') {\n        overUnder = 'no';\n      }\n      \n      const extractedProp: ExtractedPlayerProp = {\n        playerName: playerName.trim(),\n        playerId,\n        marketName: marketName.trim(),\n        line,\n        odds: oddsValue,\n        sportsbook: sportsbook.trim(),\n        eventStartUtc,\n        league: league.toUpperCase(),\n        eventId,\n        marketId: odd.statID,\n        oddId,\n        overUnder,\n        rawData: odd // Store raw data for debugging\n      };\n      \n      // Validate required fields\n      if (extractedProp.playerName && extractedProp.playerName !== 'Unknown Player' && \n          extractedProp.marketName && extractedProp.marketName !== 'unknown') {\n        out.push(extractedProp);\n      } else {\n        console.warn(`\u26A0\uFE0F Skipping invalid prop:`, {\n          playerName: extractedProp.playerName,\n          marketName: extractedProp.marketName,\n          eventId: extractedProp.eventId\n        });\n      }\n    }\n  }\n  \n  console.log(`\u2705 Extracted ${out.length} player props`);\n  return out;\n}\n\n// Enhanced extraction with better error handling and logging\nexport function extractPlayerPropsWithLogging(events: any[]): {\n  props: ExtractedPlayerProp[];\n  stats: {\n    totalEvents: number;\n    eventsWithMarkets: number;\n    totalMarkets: number;\n    playerPropMarkets: number;\n    extractedProps: number;\n    skippedProps: number;\n  };\n} {\n  const stats = {\n    totalEvents: events?.length || 0,\n    eventsWithMarkets: 0,\n    totalMarkets: 0,\n    playerPropMarkets: 0,\n    extractedProps: 0,\n    skippedProps: 0\n  };\n  \n  const props = extractPlayerProps(events);\n  stats.extractedProps = props.length;\n  \n  // Calculate additional stats\n  for (const ev of events || []) {\n    if (!ev) continue;\n    \n    const markets = ev?.odds?.markets || ev?.markets || ev?.player_props || [];\n    if (markets.length > 0) {\n      stats.eventsWithMarkets++;\n      stats.totalMarkets += markets.length;\n      \n      for (const m of markets) {\n        if (!m) continue;\n        \n        const isPlayerProp = m.type === \"player_prop\" || \n                            m.isPlayerProp === true || \n                            m.market_type === \"player_prop\" ||\n                            (m.name && m.name.toLowerCase().includes('player')) ||\n                            (m.marketName && m.marketName.toLowerCase().includes('player'));\n        \n        if (isPlayerProp) {\n          stats.playerPropMarkets++;\n        }\n      }\n    }\n  }\n  \n  stats.skippedProps = stats.totalMarkets - stats.extractedProps;\n  \n  console.log(`\uD83D\uDCCA Extraction stats:`, stats);\n  \n  return { props, stats };\n}\n\n// Filter props by specific criteria\nexport function filterProps(props: ExtractedPlayerProp[], filters: {\n  league?: string;\n  playerName?: string;\n  marketName?: string;\n  sportsbook?: string;\n  minLine?: number;\n  maxLine?: number;\n  minOdds?: number;\n  maxOdds?: number;\n}): ExtractedPlayerProp[] {\n  return props.filter(prop => {\n    if (filters.league && prop.league !== filters.league) return false;\n    if (filters.playerName && !prop.playerName.toLowerCase().includes(filters.playerName.toLowerCase())) return false;\n    if (filters.marketName && !prop.marketName.toLowerCase().includes(filters.marketName.toLowerCase())) return false;\n    if (filters.sportsbook && prop.sportsbook !== filters.sportsbook) return false;\n    if (filters.minLine !== undefined && (prop.line === null || prop.line < filters.minLine)) return false;\n    if (filters.maxLine !== undefined && (prop.line === null || prop.line > filters.maxLine)) return false;\n    if (filters.minOdds !== undefined && (prop.odds === null || prop.odds < filters.minOdds)) return false;\n    if (filters.maxOdds !== undefined && (prop.odds === null || prop.odds > filters.maxOdds)) return false;\n    return true;\n  });\n}\n\n// Group props by player\nexport function groupPropsByPlayer(props: ExtractedPlayerProp[]): Record<string, ExtractedPlayerProp[]> {\n  const grouped: Record<string, ExtractedPlayerProp[]> = {};\n  \n  for (const prop of props) {\n    const key = prop.playerName.toLowerCase().trim();\n    if (!grouped[key]) {\n      grouped[key] = [];\n    }\n    grouped[key].push(prop);\n  }\n  \n  return grouped;\n}\n\n// Get unique values for analysis\nexport function getUniqueValues(props: ExtractedPlayerProp[]): {\n  leagues: string[];\n  players: string[];\n  markets: string[];\n  sportsbooks: string[];\n} {\n  const leagues = new Set<string>();\n  const players = new Set<string>();\n  const markets = new Set<string>();\n  const sportsbooks = new Set<string>();\n  \n  for (const prop of props) {\n    leagues.add(prop.league);\n    players.add(prop.playerName);\n    markets.add(prop.marketName);\n    sportsbooks.add(prop.sportsbook);\n  }\n  \n  return {\n    leagues: Array.from(leagues).sort(),\n    players: Array.from(players).sort(),\n    markets: Array.from(markets).sort(),\n    sportsbooks: Array.from(sportsbooks).sort()\n  };\n}\n", "export async function supabaseFetch(env: any, table: string, { method = \"GET\", body, query = \"\" } = {}) {\n  const url = `${env.SUPABASE_URL}/rest/v1/${table}${query}`;\n\n  const res = await fetch(url, {\n    method,\n    headers: {\n      apikey: env.SUPABASE_SERVICE_KEY,\n      Authorization: `Bearer ${env.SUPABASE_SERVICE_KEY}`,\n      \"Content-Type\": \"application/json\",\n      ...(method === \"POST\" ? { Prefer: \"resolution=merge-duplicates\" } : {}),\n    },\n    body: body ? JSON.stringify(body) : undefined,\n  });\n\n  if (!res.ok) {\n    const text = await res.text();\n    console.error(`\u274C Supabase ${method} ${table} failed:`, text);\n    throw new Error(text);\n  }\n\n  return res.json();\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"/Users/jackie/statpedia-08/cloudflare-worker/.wrangler/tmp/bundle-5tAbBl/middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"/Users/jackie/statpedia-08/cloudflare-worker/node_modules/wrangler/templates/middleware/common.ts\";\nimport type { WorkerEntrypointConstructor } from \"/Users/jackie/statpedia-08/cloudflare-worker/.wrangler/tmp/bundle-5tAbBl/middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"/Users/jackie/statpedia-08/cloudflare-worker/.wrangler/tmp/bundle-5tAbBl/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/Users/jackie/statpedia-08/cloudflare-worker/src/worker.ts\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/Users/jackie/statpedia-08/cloudflare-worker/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"/Users/jackie/statpedia-08/cloudflare-worker/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"/Users/jackie/statpedia-08/cloudflare-worker/src/worker.ts\";\n\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "// Multi-League Multi-Season Worker with Backfill Support\n// Handles both real-time ingestion and historical backfill operations\n\nimport { runMultiSeasonBackfill, runRecentSeasonsBackfill, runFullHistoricalBackfill, runLeagueSpecificBackfill, runSeasonSpecificBackfill, runProgressiveBackfill } from \"./jobs/multiBackfill\";\nimport { runIngestion, runSingleLeagueIngestion } from \"./jobs/ingest\";\nimport { LEAGUES, getActiveLeagues, getAllSeasons, getActiveLeagueSeasonPairs } from \"./config/leagues\";\n\nexport default {\n  async fetch(req: Request, env: any) {\n    try {\n      const url = new URL(req.url);\n      \n      // Handle CORS preflight\n      if (req.method === 'OPTIONS') {\n        return new Response(null, {\n          status: 200,\n          headers: {\n            'Access-Control-Allow-Origin': '*',\n            'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\n            'Access-Control-Allow-Headers': 'Content-Type',\n          },\n        });\n      }\n\n      // Default response with available endpoints\n      if (url.pathname === '/') {\n        return new Response(JSON.stringify({\n          message: 'Multi-League Multi-Season Props Ingestion Worker',\n          endpoints: {\n            ingestion: ['/ingest', '/ingest/{league}'],\n            backfill: ['/backfill-all', '/backfill-recent', '/backfill-full', '/backfill-league/{league}', '/backfill-season/{season}'],\n            verification: ['/verify-backfill', '/verify-analytics'],\n            status: ['/status', '/leagues', '/seasons'],\n            debug: ['/debug-api', '/debug-comprehensive', '/debug-json', '/debug-extraction', '/debug-insert', '/debug-schema']\n          },\n          leagues: getActiveLeagues().map(l => l.id),\n          seasons: getAllSeasons(),\n          features: ['Multi-league ingestion', 'Multi-season backfill', 'Analytics computation', 'Fallback logic', 'Progressive backfill']\n        }), {\n          status: 200,\n          headers: {\n            'Content-Type': 'application/json',\n            'Access-Control-Allow-Origin': '*',\n          },\n        });\n      }\n      \n      // Handle backfill-all endpoint\n      if (url.pathname === '/backfill-all') {\n        const days = Number(url.searchParams.get('days') ?? '200');\n        const leagues = url.searchParams.get('leagues')?.split(',');\n        const seasons = url.searchParams.get('seasons')?.split(',').map(s => parseInt(s));\n        \n        console.log(`\uD83D\uDD04 Starting multi-season backfill: days=${days}, leagues=${leagues}, seasons=${seasons}`);\n        \n        const startTime = Date.now();\n        \n        try {\n          const result = await runMultiSeasonBackfill(env, {\n            leagues,\n            seasons,\n            daysPerSeason: days\n          });\n          \n          const duration = Date.now() - startTime;\n          \n          return new Response(JSON.stringify({\n            success: true,\n            message: 'Multi-season backfill completed successfully',\n            duration: `${duration}ms`,\n            ...result\n          }), {\n            status: 200,\n            headers: {\n              'Content-Type': 'application/json',\n              'Access-Control-Allow-Origin': '*',\n            },\n          });\n          \n        } catch (error) {\n          console.error('\u274C Multi-season backfill failed:', error);\n          \n          return new Response(JSON.stringify({\n            success: false,\n            error: error.message,\n            duration: `${Date.now() - startTime}ms`\n          }), {\n            status: 500,\n            headers: {\n              'Content-Type': 'application/json',\n              'Access-Control-Allow-Origin': '*',\n            },\n          });\n        }\n      }\n      \n      // Handle backfill-recent endpoint\n      if (url.pathname === '/backfill-recent') {\n        const days = Number(url.searchParams.get('days') ?? '90');\n        \n        console.log(`\uD83D\uDD04 Starting recent seasons backfill: ${days} days`);\n        \n        const startTime = Date.now();\n        \n        try {\n          const result = await runRecentSeasonsBackfill(env, days);\n          \n          const duration = Date.now() - startTime;\n          \n          return new Response(JSON.stringify({\n            success: true,\n            message: 'Recent seasons backfill completed successfully',\n            duration: `${duration}ms`,\n            ...result\n          }), {\n            status: 200,\n            headers: {\n              'Content-Type': 'application/json',\n              'Access-Control-Allow-Origin': '*',\n            },\n          });\n          \n        } catch (error) {\n          console.error('\u274C Recent seasons backfill failed:', error);\n          \n          return new Response(JSON.stringify({\n            success: false,\n            error: error.message,\n            duration: `${Date.now() - startTime}ms`\n          }), {\n            status: 500,\n            headers: {\n              'Content-Type': 'application/json',\n              'Access-Control-Allow-Origin': '*',\n            },\n          });\n        }\n      }\n      \n      // Handle backfill-full endpoint\n      if (url.pathname === '/backfill-full') {\n        const days = Number(url.searchParams.get('days') ?? '365');\n        \n        console.log(`\uD83D\uDD04 Starting full historical backfill: ${days} days`);\n        \n        const startTime = Date.now();\n        \n        try {\n          const result = await runFullHistoricalBackfill(env, days);\n          \n          const duration = Date.now() - startTime;\n          \n          return new Response(JSON.stringify({\n            success: true,\n            message: 'Full historical backfill completed successfully',\n            duration: `${duration}ms`,\n            ...result\n          }), {\n            status: 200,\n            headers: {\n              'Content-Type': 'application/json',\n              'Access-Control-Allow-Origin': '*',\n            },\n          });\n          \n        } catch (error) {\n          console.error('\u274C Full historical backfill failed:', error);\n          \n          return new Response(JSON.stringify({\n            success: false,\n            error: error.message,\n            duration: `${Date.now() - startTime}ms`\n          }), {\n            status: 500,\n            headers: {\n              'Content-Type': 'application/json',\n              'Access-Control-Allow-Origin': '*',\n            },\n          });\n        }\n      }\n      \n      // Handle backfill-league endpoint\n      if (url.pathname.startsWith('/backfill-league/')) {\n        const leagueId = url.pathname.split('/')[2];\n        const days = Number(url.searchParams.get('days') ?? '200');\n        const seasons = url.searchParams.get('seasons')?.split(',').map(s => parseInt(s)) || [2024, 2025];\n        \n        console.log(`\uD83D\uDD04 Starting league-specific backfill: ${leagueId}, ${days} days, seasons: ${seasons.join(', ')}`);\n        \n        const startTime = Date.now();\n        \n        try {\n          const result = await runLeagueSpecificBackfill(env, leagueId, seasons, days);\n          \n          const duration = Date.now() - startTime;\n          \n          return new Response(JSON.stringify({\n            success: true,\n            message: `League-specific backfill completed successfully for ${leagueId}`,\n            duration: `${duration}ms`,\n            ...result\n          }), {\n            status: 200,\n            headers: {\n              'Content-Type': 'application/json',\n              'Access-Control-Allow-Origin': '*',\n            },\n          });\n          \n        } catch (error) {\n          console.error(`\u274C League-specific backfill failed for ${leagueId}:`, error);\n          \n          return new Response(JSON.stringify({\n            success: false,\n            error: error.message,\n            duration: `${Date.now() - startTime}ms`\n          }), {\n            status: 500,\n            headers: {\n              'Content-Type': 'application/json',\n              'Access-Control-Allow-Origin': '*',\n            },\n          });\n        }\n      }\n      \n      // Handle backfill-season endpoint\n      if (url.pathname.startsWith('/backfill-season/')) {\n        const season = parseInt(url.pathname.split('/')[2]);\n        const days = Number(url.searchParams.get('days') ?? '200');\n        const leagues = url.searchParams.get('leagues')?.split(',');\n        \n        console.log(`\uD83D\uDD04 Starting season-specific backfill: ${season}, ${days} days, leagues: ${leagues?.join(', ') || 'all'}`);\n        \n        const startTime = Date.now();\n        \n        try {\n          const result = await runSeasonSpecificBackfill(env, season, leagues, days);\n          \n          const duration = Date.now() - startTime;\n          \n          return new Response(JSON.stringify({\n            success: true,\n            message: `Season-specific backfill completed successfully for ${season}`,\n            duration: `${duration}ms`,\n            ...result\n          }), {\n            status: 200,\n            headers: {\n              'Content-Type': 'application/json',\n              'Access-Control-Allow-Origin': '*',\n            },\n          });\n          \n        } catch (error) {\n          console.error(`\u274C Season-specific backfill failed for ${season}:`, error);\n          \n          return new Response(JSON.stringify({\n            success: false,\n            error: error.message,\n            duration: `${Date.now() - startTime}ms`\n          }), {\n            status: 500,\n            headers: {\n              'Content-Type': 'application/json',\n              'Access-Control-Allow-Origin': '*',\n            },\n          });\n        }\n      }\n      \n      // Handle backfill-progressive endpoint\n      if (url.pathname === '/backfill-progressive') {\n        const maxDays = Number(url.searchParams.get('maxDays') ?? '365');\n        \n        console.log(`\uD83D\uDD04 Starting progressive backfill: max ${maxDays} days`);\n        \n        const startTime = Date.now();\n        \n        try {\n          const result = await runProgressiveBackfill(env, maxDays);\n          \n          const duration = Date.now() - startTime;\n          \n          return new Response(JSON.stringify({\n            success: true,\n            message: 'Progressive backfill completed successfully',\n            duration: `${duration}ms`,\n            ...result\n          }), {\n            status: 200,\n            headers: {\n              'Content-Type': 'application/json',\n              'Access-Control-Allow-Origin': '*',\n            },\n          });\n          \n              } catch (error) {\n          console.error('\u274C Progressive backfill failed:', error);\n          \n          return new Response(JSON.stringify({\n            success: false,\n            error: error.message,\n            duration: `${Date.now() - startTime}ms`\n          }), {\n            status: 500,\n            headers: {\n              'Content-Type': 'application/json',\n              'Access-Control-Allow-Origin': '*',\n            },\n          });\n        }\n      }\n      \n      // Handle ingest endpoint\n      if (url.pathname === '/ingest') {\n        console.log(`\uD83D\uDD04 Starting current season ingestion...`);\n        \n        const startTime = Date.now();\n        \n        try {\n          const result = await runIngestion(env);\n          \n          const duration = Date.now() - startTime;\n          \n          return new Response(JSON.stringify({\n            success: true,\n            message: 'Current season ingestion completed successfully',\n            duration: `${duration}ms`,\n            ...result\n          }), {\n            status: 200,\n            headers: {\n              'Content-Type': 'application/json',\n              'Access-Control-Allow-Origin': '*',\n            },\n          });\n          \n        } catch (error) {\n          console.error('\u274C Ingestion failed:', error);\n          \n          return new Response(JSON.stringify({\n            success: false,\n            error: error.message,\n            duration: `${Date.now() - startTime}ms`\n          }), {\n            status: 500,\n            headers: {\n              'Content-Type': 'application/json',\n              'Access-Control-Allow-Origin': '*',\n            },\n          });\n        }\n      }\n      \n      // Handle single league ingest endpoint\n      if (url.pathname.startsWith('/ingest/')) {\n        const leagueId = url.pathname.split('/')[2];\n        \n        console.log(`\uD83D\uDD04 Starting single league ingestion for ${leagueId}...`);\n        \n        const startTime = Date.now();\n        \n        try {\n          const result = await runSingleLeagueIngestion(env, leagueId);\n          \n          const duration = Date.now() - startTime;\n          \n          return new Response(JSON.stringify({\n            success: true,\n            message: `Single league ingestion completed successfully for ${leagueId}`,\n            duration: `${duration}ms`,\n            ...result\n          }), {\n            status: 200,\n            headers: {\n              'Content-Type': 'application/json',\n              'Access-Control-Allow-Origin': '*',\n            },\n          });\n          \n        } catch (error) {\n          console.error(`\u274C Single league ingestion failed for ${leagueId}:`, error);\n          \n          return new Response(JSON.stringify({\n            success: false,\n            error: error.message,\n            duration: `${Date.now() - startTime}ms`\n          }), {\n            status: 500,\n            headers: {\n              'Content-Type': 'application/json',\n              'Access-Control-Allow-Origin': '*',\n            },\n          });\n        }\n      }\n      \n      // Handle schema check\n      if (url.pathname === '/debug-schema') {\n        try {\n          const { supabaseFetch } = await import(\"./supabaseFetch\");\n          \n          console.log('\uD83D\uDD0D Checking table schema...');\n          \n          // Query the table structure\n          const { data, error } = await supabaseFetch(env, \"proplines\", {\n            method: \"GET\",\n            query: \"?limit=1&select=*\"\n          });\n          \n          if (error) {\n            console.error(\"\u274C Schema check failed:\", error);\n            return new Response(JSON.stringify({\n              success: false,\n              error: error.message,\n              details: error\n            }), {\n              status: 500,\n              headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' },\n            });\n          } else {\n            console.log(\"\u2705 Schema check successful:\", data);\n            return new Response(JSON.stringify({\n              success: true,\n              message: \"Table schema retrieved\",\n              data: data,\n              note: \"This shows what columns exist in the table\"\n            }), {\n              headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' },\n            });\n          }\n          \n        } catch (error) {\n          return new Response(JSON.stringify({\n            success: false,\n            error: error.message\n          }), {\n            status: 500,\n            headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' },\n          });\n        }\n      }\n      \n      // Handle isolated insert test\n      if (url.pathname === '/debug-insert') {\n        try {\n          const { supabaseFetch } = await import(\"./supabaseFetch\");\n          \n          console.log('\uD83D\uDD0D Testing isolated insert...');\n          \n          // Test single hardcoded row (minimal schema)\n          const testProp = {\n            player_id: \"JALEN_HURTS-UNK-PHI\",\n            player_name: \"Jalen Hurts\",\n            team: \"PHI\",\n            opponent: \"DAL\",\n            season: 2025,\n            date: \"2025-10-08\",\n            prop_type: \"Passing Yards\",\n            sportsbook: \"Consensus\",\n            line: 245.5,\n            over_odds: -110,\n            under_odds: -110,\n            league: \"nfl\"\n            // Removed game_id and conflict_key for now to test basic insert\n          };\n          \n          console.log(\"\uD83D\uDD0D Test prop:\", JSON.stringify(testProp, null, 2));\n          \n          const { data, error } = await supabaseFetch(env, \"proplines\", {\n            method: \"POST\",\n            body: [testProp],\n            query: \"?on_conflict=conflict_key\"\n          });\n          \n          if (error) {\n            console.error(\"\u274C Insert failed:\", error);\n            return new Response(JSON.stringify({\n              success: false,\n              error: error.message,\n              details: error\n            }), {\n              status: 500,\n              headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' },\n            });\n          } else {\n            console.log(\"\u2705 Insert successful:\", data);\n            return new Response(JSON.stringify({\n              success: true,\n              message: \"Test insert successful\",\n              data: data\n            }), {\n              headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' },\n            });\n          }\n          \n        } catch (error) {\n          return new Response(JSON.stringify({\n            success: false,\n            error: error.message\n          }), {\n            status: 500,\n            headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' },\n          });\n        }\n      }\n      \n      // Handle extraction debug test\n      if (url.pathname === '/debug-extraction') {\n        try {\n          const { fetchEventsWithProps } = await import(\"./lib/api\");\n          const { extractPlayerProps } = await import(\"./lib/extract\");\n          \n          console.log('\uD83D\uDD0D Testing extraction...');\n          \n          const events = await fetchEventsWithProps(env, \"NFL\", { limit: 1 });\n          console.log(`\uD83D\uDCCA Fetched ${events.length} events`);\n          \n          if (events.length > 0) {\n            const extracted = extractPlayerProps(events);\n            console.log(`\uD83D\uDCCA Extracted ${extracted.length} props`);\n            \n            return new Response(JSON.stringify({\n              success: true,\n              eventsCount: events.length,\n              extractedPropsCount: extracted.length,\n              firstEvent: events[0] ? {\n                eventID: events[0].eventID,\n                leagueID: events[0].leagueID,\n                oddsKeys: Object.keys(events[0].odds || {}).length,\n                playersKeys: Object.keys(events[0].players || {}).length\n              } : null,\n              firstExtractedProp: extracted.length > 0 ? {\n                playerName: extracted[0].playerName,\n                marketName: extracted[0].marketName,\n                line: extracted[0].line,\n                odds: extracted[0].odds,\n                sportsbook: extracted[0].sportsbook\n              } : null\n            }), {\n              headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' },\n            });\n          } else {\n            return new Response(JSON.stringify({\n              success: false,\n              error: \"No events found\"\n            }), {\n              status: 500,\n              headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' },\n            });\n          }\n          \n        } catch (error) {\n          return new Response(JSON.stringify({\n            success: false,\n            error: error.message\n          }), {\n            status: 500,\n            headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' },\n          });\n        }\n      }\n      \n      // Handle simple JSON parsing test\n      if (url.pathname === '/debug-json') {\n        try {\n          const testUrl = `https://api.sportsgameodds.com/v2/events?apiKey=${env.SPORTSGAMEODDS_API_KEY}&leagueID=NFL`;\n          console.log(`\uD83D\uDD0D Testing JSON parsing: ${testUrl}`);\n          \n          const fetchResponse = await fetch(testUrl);\n          const responseText = await fetchResponse.text();\n          console.log(`\uD83D\uDCCA Raw response length: ${responseText.length}`);\n          console.log(`\uD83D\uDCCA Raw response first 100 chars: ${responseText.substring(0, 100)}`);\n          \n          const response = JSON.parse(responseText);\n          \n          // Handle the wrapper structure: { success: true, data: [...events] }\n          const events = response.data || response;\n          const eventsArray = Array.isArray(events) ? events : [];\n          \n          console.log(`\uD83D\uDCCA Response type: ${typeof response}`);\n          console.log(`\uD83D\uDCCA Has data field: ${!!response.data}`);\n          console.log(`\uD83D\uDCCA Events array length: ${eventsArray.length}`);\n          \n          return new Response(JSON.stringify({\n            success: true,\n            responseLength: responseText.length,\n            responseStart: responseText.substring(0, 100),\n            responseType: typeof response,\n            hasDataField: !!response.data,\n            eventsArrayLength: eventsArray.length,\n            firstEvent: eventsArray.length > 0 ? typeof eventsArray[0] : null\n          }), {\n            headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' },\n          });\n          \n        } catch (error) {\n          return new Response(JSON.stringify({\n            success: false,\n            error: error.message\n          }), {\n            status: 500,\n            headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' },\n          });\n        }\n      }\n      \n      // Handle comprehensive debug endpoint\n      if (url.pathname === '/debug-comprehensive') {\n        try {\n          console.log('\uD83D\uDD0D Running comprehensive API debug...');\n          \n          const testResults = [];\n          \n          // Test different league IDs\n          const leagues = ['NFL', 'NBA', 'MLB', 'NHL'];\n          for (const league of leagues) {\n            const url = `https://api.sportsgameodds.com/v2/events?apiKey=${env.SPORTSGAMEODDS_API_KEY}&leagueID=${league}`;\n            console.log(`\uD83D\uDD0D Testing ${league}: ${url}`);\n            \n            try {\n              const response = await fetch(url);\n              const data = await response.json();\n              testResults.push({\n                league,\n                status: response.status,\n                eventsCount: Array.isArray(data) ? data.length : 'not array',\n                dataType: typeof data,\n                isArray: Array.isArray(data),\n                firstItem: Array.isArray(data) && data.length > 0 ? typeof data[0] : null,\n                responseHeaders: Object.fromEntries(response.headers.entries()),\n                rawResponse: data // Show the actual response\n              });\n            } catch (error) {\n              testResults.push({\n                league,\n                error: error.message\n              });\n            }\n          }\n          \n          // Test with and without oddsAvailable filter\n          const testUrls = [\n            { name: 'NFL without oddsAvailable', url: `https://api.sportsgameodds.com/v2/events?apiKey=${env.SPORTSGAMEODDS_API_KEY}&leagueID=NFL` },\n            { name: 'NFL with oddsAvailable=true', url: `https://api.sportsgameodds.com/v2/events?apiKey=${env.SPORTSGAMEODDS_API_KEY}&leagueID=NFL&oddsAvailable=true` },\n            { name: 'NFL with oddsAvailable=false', url: `https://api.sportsgameodds.com/v2/events?apiKey=${env.SPORTSGAMEODDS_API_KEY}&leagueID=NFL&oddsAvailable=false` }\n          ];\n          \n          for (const test of testUrls) {\n            console.log(`\uD83D\uDD0D Testing ${test.name}: ${test.url}`);\n            \n            try {\n              const response = await fetch(test.url);\n              const data = await response.json();\n              testResults.push({\n                test: test.name,\n                status: response.status,\n                eventsCount: Array.isArray(data) ? data.length : 'not array',\n                dataType: typeof data,\n                isArray: Array.isArray(data),\n                firstItem: Array.isArray(data) && data.length > 0 ? typeof data[0] : null\n              });\n            } catch (error) {\n              testResults.push({\n                test: test.name,\n                error: error.message\n              });\n            }\n          }\n          \n          // Test different endpoints\n          const endpoints = [\n            '/v2/events',\n            '/v2/odds', \n            '/v2/playerprops'\n          ];\n          \n          for (const endpoint of endpoints) {\n            const url = `https://api.sportsgameodds.com${endpoint}?apiKey=${env.SPORTSGAMEODDS_API_KEY}&leagueID=NFL`;\n            console.log(`\uD83D\uDD0D Testing ${endpoint}: ${url}`);\n            \n            try {\n              const response = await fetch(url);\n              const data = await response.json();\n              testResults.push({\n                endpoint,\n                status: response.status,\n                eventsCount: Array.isArray(data) ? data.length : 'not array',\n                dataType: typeof data\n              });\n              } catch (error) {\n              testResults.push({\n                endpoint,\n                error: error.message\n              });\n            }\n          }\n          \n          return new Response(JSON.stringify({\n            success: true,\n            apiKeyLength: env.SPORTSGAMEODDS_API_KEY ? env.SPORTSGAMEODDS_API_KEY.length : 0,\n            testResults\n          }), {\n            headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' },\n          });\n          \n        } catch (error) {\n          return new Response(JSON.stringify({\n            success: false,\n            error: error.message\n          }), {\n            status: 500,\n            headers: { 'Content-Type': 'application/json', 'Access-Control-Allow-Origin': '*' },\n          });\n        }\n      }\n      \n      // Handle debug API endpoint\n      if (url.pathname === '/debug-api') {\n        try {\n          const { fetchEventsWithProps } = await import(\"./lib/api\");\n          \n          console.log('\uD83D\uDD0D Testing API directly...');\n          \n          // Test NFL API call\n          console.log('\uD83D\uDD0D API Key available:', !!env.SPORTSGAMEODDS_API_KEY);\n          console.log('\uD83D\uDD0D API Key length:', env.SPORTSGAMEODDS_API_KEY ? env.SPORTSGAMEODDS_API_KEY.length : 0);\n          \n          // Test 1: Basic API call without filters\n          console.log('\uD83D\uDD0D Test 1: Basic API call without filters');\n          const basicUrl = `https://api.sportsgameodds.com/v2/events?apiKey=${env.SPORTSGAMEODDS_API_KEY}&leagueID=NFL&oddsAvailable=true`;\n          console.log('\uD83D\uDD0D Basic URL:', basicUrl);\n          \n          try {\n            const basicResponse = await fetch(basicUrl);\n            const basicData = await basicResponse.json();\n            console.log('\uD83D\uDCCA Basic API Response:', {\n              status: basicResponse.status,\n              eventsCount: Array.isArray(basicData) ? basicData.length : 'not array',\n              dataType: typeof basicData,\n              firstEvent: Array.isArray(basicData) && basicData.length > 0 ? basicData[0] : null\n            });\n          } catch (error) {\n            console.error('\u274C Basic API call failed:', error);\n          }\n          \n          // Test 2: With season filter\n          console.log('\uD83D\uDD0D Test 2: With season filter');\n          const seasonUrl = `https://api.sportsgameodds.com/v2/events?apiKey=${env.SPORTSGAMEODDS_API_KEY}&leagueID=NFL&oddsAvailable=true&season=2024`;\n          console.log('\uD83D\uDD0D Season URL:', seasonUrl);\n          \n          try {\n            const seasonResponse = await fetch(seasonUrl);\n            const seasonData = await seasonResponse.json();\n            console.log('\uD83D\uDCCA Season API Response:', {\n              status: seasonResponse.status,\n              eventsCount: Array.isArray(seasonData) ? seasonData.length : 'not array'\n            });\n          } catch (error) {\n            console.error('\u274C Season API call failed:', error);\n          }\n          \n          // Test 3: With date filter (current date in UTC)\n          console.log('\uD83D\uDD0D Test 3: With date filter');\n          const today = new Date().toISOString().split('T')[0]; // YYYY-MM-DD in UTC\n          const dateUrl = `https://api.sportsgameodds.com/v2/events?apiKey=${env.SPORTSGAMEODDS_API_KEY}&leagueID=NFL&oddsAvailable=true&dateFrom=${today}&dateTo=${today}`;\n          console.log('\uD83D\uDD0D Date URL:', dateUrl);\n          \n          try {\n            const dateResponse = await fetch(dateUrl);\n            const dateData = await dateResponse.json();\n            console.log('\uD83D\uDCCA Date API Response:', {\n              status: dateResponse.status,\n              eventsCount: Array.isArray(dateData) ? dateData.length : 'not array',\n              dateUsed: today\n            });\n          } catch (error) {\n            console.error('\u274C Date API call failed:', error);\n          }\n          \n          // Test 4: Using the existing fetchEventsWithProps function\n          console.log('\uD83D\uDD0D Test 4: Using fetchEventsWithProps');\n          const events = await fetchEventsWithProps(env, \"NFL\", {\n            limit: 5\n          });\n          \n          console.log(`\uD83D\uDCCA fetchEventsWithProps result: ${events.length} events`);\n          \n          if (events.length > 0) {\n            const firstEvent = events[0];\n            console.log('\uD83D\uDCCA First event structure:', {\n              id: firstEvent.id,\n              leagueID: firstEvent.leagueID,\n              oddsKeys: Object.keys(firstEvent.odds || {}).length,\n              playersKeys: Object.keys(firstEvent.players || {}).length,\n              sampleOdd: Object.values(firstEvent.odds || {})[0]\n            });\n          }\n          \n          return new Response(JSON.stringify({\n            success: true,\n            eventsCount: events.length,\n            firstEvent: events.length > 0 ? {\n              id: events[0].id,\n              leagueID: events[0].leagueID,\n              oddsCount: Object.keys(events[0].odds || {}).length,\n              playersCount: Object.keys(events[0].players || {}).length\n            } : null\n          }), {\n            status: 200,\n            headers: {\n              'Content-Type': 'application/json',\n              'Access-Control-Allow-Origin': '*',\n            },\n          });\n          \n        } catch (error) {\n          console.error('\u274C Debug API failed:', error);\n          \n          return new Response(JSON.stringify({\n            success: false,\n            error: error.message\n          }), {\n            status: 500,\n            headers: {\n              'Content-Type': 'application/json',\n              'Access-Control-Allow-Origin': '*',\n            },\n          });\n        }\n      }\n\n      // Handle status endpoints\n      if (url.pathname === '/status') {\n        return new Response(JSON.stringify({\n          status: 'healthy',\n          timestamp: new Date().toISOString(),\n          activeLeagues: getActiveLeagues().length,\n          totalLeagues: LEAGUES.length,\n          availableSeasons: getAllSeasons()\n        }), {\n          status: 200,\n          headers: {\n            'Content-Type': 'application/json',\n            'Access-Control-Allow-Origin': '*',\n          },\n        });\n      }\n      \n      if (url.pathname === '/leagues') {\n        return new Response(JSON.stringify({\n          all: LEAGUES,\n          active: getActiveLeagues(),\n          total: LEAGUES.length,\n          activeCount: getActiveLeagues().length\n        }), {\n          status: 200,\n          headers: {\n            'Content-Type': 'application/json',\n            'Access-Control-Allow-Origin': '*',\n          },\n        });\n      }\n      \n      if (url.pathname === '/seasons') {\n        return new Response(JSON.stringify({\n          all: getAllSeasons(),\n          total: getAllSeasons().length,\n          current: new Date().getFullYear()\n        }), {\n          status: 200,\n          headers: {\n            'Content-Type': 'application/json',\n            'Access-Control-Allow-Origin': '*',\n          },\n        });\n      }\n      \n      // Default 404 response\n      return new Response(JSON.stringify({\n        error: 'Endpoint not found',\n        availableEndpoints: ['/backfill-all', '/backfill-recent', '/backfill-full', '/backfill-league/{league}', '/backfill-season/{season}', '/backfill-progressive', '/ingest', '/ingest/{league}', '/status', '/leagues', '/seasons']\n      }), {\n        status: 404,\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n        },\n      });\n      \n    } catch (error) {\n      console.error('\u274C Worker fetch error:', error);\n      \n      return new Response(JSON.stringify({\n        success: false,\n        error: error.message || 'Internal Server Error'\n      }), {\n        status: 500,\n        headers: {\n          'Content-Type': 'application/json',\n          'Access-Control-Allow-Origin': '*',\n        },\n      });\n    }\n  },\n  \n  async scheduled(event: ScheduledEvent, env: any, ctx: ExecutionContext) {\n    console.log(`\uD83D\uDD50 Scheduled ingestion triggered at ${new Date().toISOString()}`);\n    \n    // Run current season ingestion on cron\n    ctx.waitUntil(runIngestion(env));\n  },\n};", "// Multi-Season Backfill Orchestrator\n// Coordinates backfill across multiple leagues and seasons\n\nimport { runBatchBackfill } from \"./backfill\";\nimport { LEAGUES, getActiveLeagues, getAllSeasons, getActiveLeagueSeasonPairs } from \"../config/leagues\";\n\nexport interface MultiSeasonBackfillConfig {\n  leagues?: string[]; // Specific leagues to backfill, or all active leagues if not specified\n  seasons?: number[]; // Specific seasons to backfill, or all seasons if not specified\n  daysPerSeason?: number; // Days to backfill per season\n  maxConcurrent?: number; // Maximum concurrent backfills (not implemented yet)\n}\n\nexport interface MultiSeasonBackfillResult {\n  totalProps: number;\n  totalGameLogs: number;\n  totalErrors: number;\n  duration: number;\n  leagueSeasonResults: Record<string, any>;\n  summary: {\n    leaguesProcessed: number;\n    seasonsProcessed: number;\n    averagePropsPerLeague: number;\n    averageGameLogsPerLeague: number;\n    successRate: number;\n  };\n}\n\nexport async function runMultiSeasonBackfill(env: any, config: MultiSeasonBackfillConfig = {}): Promise<MultiSeasonBackfillResult> {\n  const startTime = Date.now();\n  \n  console.log(`\uD83D\uDE80 Starting multi-season backfill with config:`, config);\n  \n  // Determine which leagues to process\n  const leaguesToProcess = config.leagues || getActiveLeagues().map(l => l.id);\n  console.log(`\uD83D\uDCCA Processing leagues: ${leaguesToProcess.join(', ')}`);\n  \n  // Determine which seasons to process\n  const seasonsToProcess = config.seasons || getAllSeasons();\n  console.log(`\uD83D\uDCCA Processing seasons: ${seasonsToProcess.join(', ')}`);\n  \n  // Default days per season\n  const daysPerSeason = config.daysPerSeason || 200;\n  console.log(`\uD83D\uDCCA Days per season: ${daysPerSeason}`);\n  \n  // Create league/season combinations\n  const combinations = [];\n  for (const leagueId of leaguesToProcess) {\n    for (const season of seasonsToProcess) {\n      combinations.push({\n        leagueID: leagueId,\n        season: season,\n        days: daysPerSeason\n      });\n    }\n  }\n  \n  console.log(`\uD83D\uDCCA Total combinations: ${combinations.length}`);\n  console.log(`\uD83D\uDCCA Estimated duration: ${Math.ceil(combinations.length * 2)} minutes`);\n  \n  // Run batch backfill\n  const batchResult = await runBatchBackfill(env, combinations);\n  \n  const duration = Date.now() - startTime;\n  \n  // Calculate summary statistics\n  const leaguesProcessed = new Set(combinations.map(c => c.leagueID)).size;\n  const seasonsProcessed = new Set(combinations.map(c => c.season)).size;\n  const averagePropsPerLeague = batchResult.totalProps / leaguesProcessed;\n  const averageGameLogsPerLeague = batchResult.totalGameLogs / leaguesProcessed;\n  const totalCombinations = combinations.length;\n  const successfulCombinations = Object.values(batchResult.results).filter(r => r.errors === 0).length;\n  const successRate = (successfulCombinations / totalCombinations) * 100;\n  \n  const result: MultiSeasonBackfillResult = {\n    totalProps: batchResult.totalProps,\n    totalGameLogs: batchResult.totalGameLogs,\n    totalErrors: batchResult.totalErrors,\n    duration,\n    leagueSeasonResults: batchResult.results,\n    summary: {\n      leaguesProcessed,\n      seasonsProcessed,\n      averagePropsPerLeague: Math.round(averagePropsPerLeague),\n      averageGameLogsPerLeague: Math.round(averageGameLogsPerLeague),\n      successRate: Math.round(successRate * 100) / 100\n    }\n  };\n  \n  console.log(`\\n\uD83C\uDF89 Multi-season backfill complete!`);\n  console.log(`\u23F1\uFE0F Duration: ${Math.round(duration / 1000)}s`);\n  console.log(`\uD83D\uDCCA Results: ${result.totalProps} props, ${result.totalGameLogs} game logs, ${result.totalErrors} errors`);\n  console.log(`\uD83D\uDCC8 Success Rate: ${result.summary.successRate}%`);\n  console.log(`\uD83C\uDFC6 Leagues: ${result.summary.leaguesProcessed}, Seasons: ${result.summary.seasonsProcessed}`);\n  \n  return result;\n}\n\n// Quick backfill for recent seasons only\nexport async function runRecentSeasonsBackfill(env: any, daysPerSeason: number = 90): Promise<MultiSeasonBackfillResult> {\n  console.log(`\uD83D\uDD04 Running recent seasons backfill (${daysPerSeason} days per season)`);\n  \n  return runMultiSeasonBackfill(env, {\n    leagues: getActiveLeagues().map(l => l.id),\n    seasons: [2024, 2025], // Recent seasons only\n    daysPerSeason\n  });\n}\n\n// Full historical backfill for all seasons\nexport async function runFullHistoricalBackfill(env: any, daysPerSeason: number = 365): Promise<MultiSeasonBackfillResult> {\n  console.log(`\uD83D\uDD04 Running full historical backfill (${daysPerSeason} days per season)`);\n  \n  return runMultiSeasonBackfill(env, {\n    leagues: getActiveLeagues().map(l => l.id),\n    seasons: getAllSeasons(),\n    daysPerSeason\n  });\n}\n\n// League-specific backfill\nexport async function runLeagueSpecificBackfill(env: any, leagueId: string, seasons: number[], daysPerSeason: number = 200): Promise<MultiSeasonBackfillResult> {\n  console.log(`\uD83D\uDD04 Running league-specific backfill for ${leagueId} (${seasons.join(', ')})`);\n  \n  return runMultiSeasonBackfill(env, {\n    leagues: [leagueId],\n    seasons,\n    daysPerSeason\n  });\n}\n\n// Season-specific backfill\nexport async function runSeasonSpecificBackfill(env: any, season: number, leagues?: string[], daysPerSeason: number = 200): Promise<MultiSeasonBackfillResult> {\n  const leaguesToUse = leagues || getActiveLeagues().map(l => l.id);\n  console.log(`\uD83D\uDD04 Running season-specific backfill for ${season} (${leaguesToUse.join(', ')})`);\n  \n  return runMultiSeasonBackfill(env, {\n    leagues: leaguesToUse,\n    seasons: [season],\n    daysPerSeason\n  });\n}\n\n// Progressive backfill - start with recent data and work backwards\nexport async function runProgressiveBackfill(env: any, maxDays: number = 365): Promise<MultiSeasonBackfillResult> {\n  console.log(`\uD83D\uDD04 Running progressive backfill (max ${maxDays} days)`);\n  \n  const activeLeagues = getActiveLeagues();\n  const currentYear = new Date().getFullYear();\n  \n  // Start with current season, then work backwards\n  const seasons = [currentYear, currentYear - 1, currentYear - 2];\n  \n  const combinations = [];\n  for (const league of activeLeagues) {\n    for (const season of seasons) {\n      // Reduce days for older seasons\n      const days = Math.min(maxDays, Math.max(30, maxDays - ((currentYear - season) * 50)));\n      combinations.push({\n        leagueID: league.id,\n        season: season,\n        days: days\n      });\n    }\n  }\n  \n  console.log(`\uD83D\uDCCA Progressive backfill: ${combinations.length} combinations`);\n  \n  const batchResult = await runBatchBackfill(env, combinations);\n  \n  const duration = Date.now();\n  const leaguesProcessed = new Set(combinations.map(c => c.leagueID)).size;\n  const seasonsProcessed = new Set(combinations.map(c => c.season)).size;\n  const totalCombinations = combinations.length;\n  const successfulCombinations = Object.values(batchResult.results).filter(r => r.errors === 0).length;\n  const successRate = (successfulCombinations / totalCombinations) * 100;\n  \n  return {\n    totalProps: batchResult.totalProps,\n    totalGameLogs: batchResult.totalGameLogs,\n    totalErrors: batchResult.totalErrors,\n    duration,\n    leagueSeasonResults: batchResult.results,\n    summary: {\n      leaguesProcessed,\n      seasonsProcessed,\n      averagePropsPerLeague: Math.round(batchResult.totalProps / leaguesProcessed),\n      averageGameLogsPerLeague: Math.round(batchResult.totalGameLogs / leaguesProcessed),\n      successRate: Math.round(successRate * 100) / 100\n    }\n  };\n}\n", "// Backfill Runner with Multi-Season Orchestration\n// Handles historical data ingestion for analytics enablement\n\nimport { getEventsWithFallbacks, getEventsWithAggressiveFallbacks } from \"../lib/api\";\nimport { extractPlayerPropsWithLogging } from \"../lib/extract\";\nimport { supabaseFetch } from \"../supabaseFetch\";\nimport { chunk } from \"../helpers\";\nimport { createPlayerPropsFromOdd } from \"../createPlayerPropsFromOdd\";\nimport { getCachedPlayerIdMap } from \"../playersLoader\";\n\nexport interface BackfillResult {\n  propsInserted: number;\n  gameLogsInserted: number;\n  errors: number;\n  tier: number;\n  eventsProcessed: number;\n  extractionStats: any;\n}\n\nexport async function runBackfill(env: any, leagueID: string, season: number, days: number): Promise<BackfillResult> {\n  console.log(`\uD83D\uDD04 Starting backfill for ${leagueID} season ${season} (${days} days)`);\n  \n  const startTime = Date.now();\n  let propsInserted = 0;\n  let gameLogsInserted = 0;\n  let errors = 0;\n  let tier = 0;\n  let eventsProcessed = 0;\n  let extractionStats: any = null;\n  \n  try {\n    // Fetch events using fallback strategy\n    const { events, tier: fetchedTier } = await getEventsWithAggressiveFallbacks(env, leagueID, season);\n    tier = fetchedTier;\n    eventsProcessed = events.length;\n    \n    console.log(`\uD83D\uDCCA ${leagueID} ${season}: Fetched ${events.length} events (tier ${tier})`);\n    \n    if (events.length === 0) {\n      console.log(`\u26A0\uFE0F ${leagueID} ${season}: No events found for backfill`);\n      return { propsInserted: 0, gameLogsInserted: 0, errors: 1, tier: 0, eventsProcessed: 0, extractionStats: null };\n    }\n    \n    // Extract player props with detailed logging\n    const { props: extractedProps, stats } = extractPlayerPropsWithLogging(events);\n    extractionStats = stats;\n    \n    console.log(`\uD83D\uDCCA ${leagueID} ${season}: Extracted ${extractedProps.length} player props`);\n    \n    if (extractedProps.length === 0) {\n      console.log(`\u26A0\uFE0F ${leagueID} ${season}: No player props extracted`);\n      return { propsInserted: 0, gameLogsInserted: 0, errors: 0, tier, eventsProcessed, extractionStats };\n    }\n    \n    // Load player ID map for mapping\n    const playerIdMap = await getCachedPlayerIdMap(env);\n    console.log(`\uD83D\uDCCA ${leagueID} ${season}: Loaded player map with ${Object.keys(playerIdMap).length} players`);\n    \n    // Convert extracted props to proplines format\n    const mappedProps = [];\n    for (const prop of extractedProps) {\n      try {\n        // Create a mock event object for createPlayerPropsFromOdd\n        const mockEvent = {\n          id: prop.eventId,\n          date: prop.eventStartUtc,\n          homeTeam: 'HOME', // Will be extracted from actual event data\n          awayTeam: 'AWAY', // Will be extracted from actual event data\n          teams: ['HOME', 'AWAY']\n        };\n        \n        // Create a mock odd object for createPlayerPropsFromOdd\n        const mockOdd = {\n          player_name: prop.playerName,\n          playerID: prop.playerId,\n          market_key: prop.marketName,\n          point: prop.line,\n          over_price: prop.overUnder === 'over' ? prop.odds : null,\n          under_price: prop.overUnder === 'under' ? prop.odds : null,\n          bookmaker_name: prop.sportsbook,\n          id: prop.oddId\n        };\n        \n        const eventProps = await createPlayerPropsFromOdd(\n          mockOdd, \n          prop.oddId, \n          mockEvent, \n          prop.league.toLowerCase(), \n          season.toString(), \n          undefined, \n          env\n        );\n        \n        mappedProps.push(...eventProps);\n        \n      } catch (error) {\n        console.error(`\u274C Error mapping prop ${prop.oddId}:`, error);\n        errors++;\n      }\n    }\n    \n    console.log(`\uD83D\uDCCA ${leagueID} ${season}: Mapped ${mappedProps.length} props for insertion`);\n    \n    // Batch insert props\n    if (mappedProps.length > 0) {\n      const propChunks = chunk(mappedProps, 500);\n      console.log(`\uD83D\uDCCA ${leagueID} ${season}: Inserting ${propChunks.length} prop batches`);\n      \n      for (let i = 0; i < propChunks.length; i++) {\n        try {\n          // Debug: Log first row structure\n          if (propChunks[i].length > 0) {\n            console.log(\"\uD83D\uDD0D Sample propline row:\", JSON.stringify(propChunks[i][0], null, 2));\n            console.log(\"\uD83D\uDD0D Batch size:\", propChunks[i].length);\n          }\n          \n          const { data, error } = await supabaseFetch(env, \"proplines\", {\n            method: \"POST\",\n            body: propChunks[i],\n            query: \"?on_conflict=conflict_key\"\n          });\n          \n          if (error) {\n            console.error(`\u274C ${leagueID} ${season}: Props batch ${i + 1} failed:`, error);\n            errors += propChunks[i].length;\n          } else {\n            propsInserted += propChunks[i].length;\n            console.log(`\u2705 ${leagueID} ${season}: Inserted props batch ${i + 1}/${propChunks.length} (${propChunks[i].length} props)`);\n          }\n          \n        } catch (error) {\n          console.error(`\u274C ${leagueID} ${season}: Props batch ${i + 1} exception:`, error);\n          errors += propChunks[i].length;\n        }\n      }\n    }\n    \n    // Create game log entries for analytics\n    const gameLogRows = mappedProps.map(row => ({\n      player_id: row.player_id,\n      player_name: row.player_name,\n      team: row.team,\n      opponent: row.opponent || 'UNK',\n      season: season,\n      date: row.game_time ? row.game_time.split('T')[0] : new Date().toISOString().split('T')[0],\n      prop_type: row.prop_type,\n      value: row.line || 0, // Use line as value for now\n      sport: getSportFromLeague(leagueID),\n      position: row.position || 'UNK',\n      game_id: row.game_id,\n      home_away: row.home_away || 'HOME',\n      weather_conditions: row.weather_conditions,\n      injury_status: 'Active'\n    }));\n    \n    // Batch insert game logs\n    if (gameLogRows.length > 0) {\n      const gameLogChunks = chunk(gameLogRows, 500);\n      console.log(`\uD83D\uDCCA ${leagueID} ${season}: Inserting ${gameLogChunks.length} game log batches`);\n      \n      for (let i = 0; i < gameLogChunks.length; i++) {\n        try {\n          const { data, error } = await supabaseFetch(env, \"player_game_logs\", {\n            method: \"POST\",\n            body: gameLogChunks[i],\n            query: \"?on_conflict=unique_player_game_log\"\n          });\n          \n          if (error) {\n            console.error(`\u274C ${leagueID} ${season}: Game logs batch ${i + 1} failed:`, error);\n            errors += gameLogChunks[i].length;\n          } else {\n            gameLogsInserted += gameLogChunks[i].length;\n            console.log(`\u2705 ${leagueID} ${season}: Inserted game logs batch ${i + 1}/${gameLogChunks.length} (${gameLogChunks[i].length} logs)`);\n          }\n          \n        } catch (error) {\n          console.error(`\u274C ${leagueID} ${season}: Game logs batch ${i + 1} exception:`, error);\n          errors += gameLogChunks[i].length;\n        }\n      }\n    }\n    \n    const duration = Date.now() - startTime;\n    console.log(`\u2705 ${leagueID} ${season} backfill complete: ${propsInserted} props, ${gameLogsInserted} game logs, ${errors} errors in ${duration}ms`);\n    \n    return {\n      propsInserted,\n      gameLogsInserted,\n      errors,\n      tier,\n      eventsProcessed,\n      extractionStats\n    };\n    \n  } catch (error) {\n    console.error(`\u274C ${leagueID} ${season} backfill failed:`, error);\n    return { propsInserted: 0, gameLogsInserted: 0, errors: 1, tier: 0, eventsProcessed: 0, extractionStats: null };\n  }\n}\n\n// Helper function to get sport from league ID\nfunction getSportFromLeague(leagueId: string): string {\n  const leagueMap: Record<string, string> = {\n    'NFL': 'football',\n    'NCAAF': 'football',\n    'NBA': 'basketball',\n    'NCAAB': 'basketball',\n    'MLB': 'baseball',\n    'NHL': 'hockey',\n    'EPL': 'soccer'\n  };\n  \n  return leagueMap[leagueId] || 'unknown';\n}\n\n// Enhanced backfill with date range specification\nexport async function runBackfillWithDateRange(env: any, config: {\n  leagueID: string;\n  season: number;\n  dateFrom: string;\n  dateTo: string;\n}): Promise<BackfillResult> {\n  const { leagueID, season, dateFrom, dateTo } = config;\n  \n  console.log(`\uD83D\uDD04 Backfilling ${leagueID} ${season} from ${dateFrom} to ${dateTo}`);\n  \n  try {\n    // Calculate days between dates for logging\n    const startDate = new Date(dateFrom);\n    const endDate = new Date(dateTo);\n    const days = Math.ceil((endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24));\n    \n    // For date range backfill, we'll use the standard backfill but log the date range\n    const result = await runBackfill(env, leagueID, season, days);\n    \n    console.log(`\u2705 Date range backfill complete for ${leagueID} ${season}: ${result.propsInserted} props, ${result.gameLogsInserted} game logs`);\n    \n    return result;\n    \n  } catch (error) {\n    console.error(`\u274C Date range backfill failed for ${leagueID} ${season}:`, error);\n    return { propsInserted: 0, gameLogsInserted: 0, errors: 1, tier: 0, eventsProcessed: 0, extractionStats: null };\n  }\n}\n\n// Batch backfill for multiple league/season combinations\nexport async function runBatchBackfill(env: any, combinations: Array<{\n  leagueID: string;\n  season: number;\n  days: number;\n}>): Promise<{\n  totalProps: number;\n  totalGameLogs: number;\n  totalErrors: number;\n  results: Record<string, BackfillResult>;\n}> {\n  console.log(`\uD83D\uDE80 Starting batch backfill for ${combinations.length} league/season combinations`);\n  \n  let totalProps = 0;\n  let totalGameLogs = 0;\n  let totalErrors = 0;\n  const results: Record<string, BackfillResult> = {};\n  \n  for (const combo of combinations) {\n    const key = `${combo.leagueID}-${combo.season}`;\n    console.log(`\\n\uD83C\uDFC8 Backfilling ${key} (${combo.days} days)`);\n    \n    try {\n      const result = await runBackfill(env, combo.leagueID, combo.season, combo.days);\n      \n      totalProps += result.propsInserted;\n      totalGameLogs += result.gameLogsInserted;\n      totalErrors += result.errors;\n      \n      results[key] = result;\n      \n      console.log(`\u2705 ${key}: ${result.propsInserted} props, ${result.gameLogsInserted} game logs, ${result.errors} errors`);\n      \n    } catch (error) {\n      console.error(`\u274C ${key} backfill failed:`, error);\n      results[key] = { propsInserted: 0, gameLogsInserted: 0, errors: 1, tier: 0, eventsProcessed: 0, extractionStats: null };\n      totalErrors++;\n    }\n  }\n  \n  console.log(`\\n\uD83C\uDF89 Batch backfill complete:`);\n  console.log(`\uD83D\uDCCA Total: ${totalProps} props, ${totalGameLogs} game logs, ${totalErrors} errors`);\n  \n  return {\n    totalProps,\n    totalGameLogs,\n    totalErrors,\n    results\n  };\n}\n", "export function chunk<T>(arr: T[], size: number): T[][] {\n  const out: T[][] = [];\n  for (let i = 0; i < arr.length; i += size) out.push(arr.slice(i, i + size));\n  return out;\n}\n\nexport function toYmd(iso: string): string {\n  return new Date(iso).toISOString().slice(0, 10);\n}\n", "import { toYmd } from \"./helpers\";\nimport { storeMissingPlayer } from \"./missingPlayers\";\nimport { getCachedPlayerIdMap, updateMissingPlayersSuccess } from \"./playersLoader\";\nimport { normalizeName } from \"./normalizeName\";\n\n// Market mapping for prop types\nconst MARKET_MAP: Record<string, string> = {\n  // NFL Passing\n  'passing yards': 'Passing Yards',\n  'pass yards': 'Passing Yards',\n  'passing yds': 'Passing Yards',\n  'pass yds': 'Passing Yards',\n  'passing yards passing': 'Passing Yards',\n  'passing touchdowns': 'Passing Touchdowns',\n  'pass tds': 'Passing Touchdowns',\n  'passing td': 'Passing Touchdowns',\n  'pass td': 'Passing Touchdowns',\n  'passing attempts': 'Passing Attempts',\n  'pass attempts': 'Passing Attempts',\n  'pass att': 'Passing Attempts',\n  'passing completions': 'Passing Completions',\n  'pass completions': 'Passing Completions',\n  'pass comp': 'Passing Completions',\n  'passing interceptions': 'Passing Interceptions',\n  'pass interceptions': 'Passing Interceptions',\n  'pass int': 'Passing Interceptions',\n  \n  // NFL Rushing\n  'rushing yards': 'Rushing Yards',\n  'rush yards': 'Rushing Yards',\n  'rushing yds': 'Rushing Yards',\n  'rush yds': 'Rushing Yards',\n  'rushing touchdowns': 'Rushing Touchdowns',\n  'rush tds': 'Rushing Touchdowns',\n  'rushing td': 'Rushing Touchdowns',\n  'rush td': 'Rushing Touchdowns',\n  'rushing attempts': 'Rushing Attempts',\n  'rush attempts': 'Rushing Attempts',\n  'rush att': 'Rushing Attempts',\n  \n  // NFL Receiving\n  'receiving yards': 'Receiving Yards',\n  'rec yards': 'Receiving Yards',\n  'receiving yds': 'Receiving Yards',\n  'rec yds': 'Receiving Yards',\n  'receiving touchdowns': 'Receiving Touchdowns',\n  'rec tds': 'Receiving Touchdowns',\n  'receiving td': 'Receiving Touchdowns',\n  'rec td': 'Receiving Touchdowns',\n  'receptions': 'Receptions',\n  'rec': 'Receptions',\n  \n  // NFL Defense\n  'defense sacks': 'Defense Sacks',\n  'defense interceptions': 'Defense Interceptions',\n  'defense combined tackles': 'Defense Combined Tackles',\n  'defense total tackles': 'Defense Combined Tackles',\n  \n  // NFL Kicking\n  'field goals made': 'Field Goals Made',\n  'kicking total points': 'Kicking Total Points',\n  'extra points kicks made': 'Extra Points Made',\n  \n  // NBA\n  'points': 'Points',\n  'rebounds': 'Rebounds',\n  'assists': 'Assists',\n  'steals': 'Steals',\n  'blocks': 'Blocks',\n  'threes made': 'Three Pointers Made',\n  '3-pointers made': 'Three Pointers Made',\n  \n  // MLB\n  'hits': 'Hits',\n  'runs': 'Runs',\n  'rbis': 'RBIs',\n  'strikeouts': 'Strikeouts',\n  'walks': 'Walks',\n  'home runs': 'Home Runs',\n  \n  // NHL\n  'goals': 'Goals',\n  'shots': 'Shots',\n  'saves': 'Saves',\n};\n\n// Get canonical player ID with dynamic loading from Supabase\nasync function getPlayerID(playerName: string, team: string, league: string, env?: any): Promise<string | null> {\n  if (!env) {\n    // Fallback if env not available\n    const canonicalName = playerName.toUpperCase()\n      .replace(/[^\\w\\s]/g, '')\n      .replace(/\\s+/g, '_')\n      .replace(/\\s(jr|sr|iii|iv|v)$/i, '')\n      .trim();\n    return `${canonicalName}-UNK-${team}`;\n  }\n\n  try {\n    // Load dynamic player map from Supabase\n    const playerMap = await getCachedPlayerIdMap(env);\n    const normalizedName = normalizeName(playerName);\n    \n    // Try exact match first\n    if (playerMap[normalizedName]) {\n      const canonicalId = playerMap[normalizedName];\n      console.log(`\u2705 Found player mapping: ${playerName} \u2192 ${canonicalId}`);\n      \n      // Update missing players table to remove this player\n      await updateMissingPlayersSuccess(env, playerName, canonicalId);\n      \n      return canonicalId;\n    }\n    \n    // Try partial matches for common name variations\n    for (const [key, value] of Object.entries(playerMap)) {\n      if (key.includes(normalizedName) || normalizedName.includes(key)) {\n        const canonicalId = value;\n        console.log(`\u2705 Found fuzzy player mapping: ${playerName} \u2192 ${canonicalId}`);\n        \n        // Update missing players table to remove this player\n        await updateMissingPlayersSuccess(env, playerName, canonicalId);\n        \n        return canonicalId;\n      }\n    }\n    \n    // Fallback: generate canonical ID\n    const canonicalName = playerName.toUpperCase()\n      .replace(/[^\\w\\s]/g, '')\n      .replace(/\\s+/g, '_')\n      .replace(/\\s(jr|sr|iii|iv|v)$/i, '')\n      .trim();\n    \n    return `${canonicalName}-UNK-${team}`;\n    \n  } catch (error) {\n    console.error(`\u274C Error loading player map for ${playerName}:`, error);\n    \n    // Fallback on error\n    const canonicalName = playerName.toUpperCase()\n      .replace(/[^\\w\\s]/g, '')\n      .replace(/\\s+/g, '_')\n      .replace(/\\s(jr|sr|iii|iv|v)$/i, '')\n      .trim();\n    \n    return `${canonicalName}-UNK-${team}`;\n  }\n}\n\nexport async function createPlayerPropsFromOdd(odd: any, oddId: string, event: any, league: string, season: string, week?: string, env?: any): Promise<any[]> {\n  const props: any[] = [];\n  \n  // Extract player information\n  const playerName = odd.player?.name;\n  const team = odd.player?.team;\n  \n  if (!playerName || !team) {\n    console.log(`Skipping odd ${oddId}: missing player name or team`);\n    return props;\n  }\n\n  // Get canonical player ID with dynamic loading\n  const playerID = await getPlayerID(playerName, team, league, env);\n  \n  if (!playerID) {\n    console.error(\"Failed to generate player_id mapping\", { \n      playerName, \n      team, \n      league, \n      normalizedName: normalizeName(playerName)\n    });\n    return props;\n  }\n  \n  // Store missing player mappings for manual review\n  if (playerID.includes('-UNK-') && env) {\n    console.error(\"Missing player_id mapping\", { \n      playerName, \n      team, \n      league, \n      generatedId: playerID,\n      normalizedName: normalizeName(playerName)\n    });\n    \n    // Store in missing_players table for later reconciliation\n    await storeMissingPlayer(env, playerName, team, league, playerID, oddId);\n  }\n  \n  // Extract game date - use event date, not ingestion date\n  const gameDate = event.date ? event.date.split('T')[0] : new Date().toISOString().split('T')[0];\n  \n  // Extract prop information\n  const rawPropType = odd.prop?.name;\n  const line = odd.line;\n  const overOdds = odd.overOdds;\n  const underOdds = odd.underOdds;\n  const sportsbook = mapBookmakerIdToName(odd.bookmaker?.id || 'unknown') || 'Consensus';\n  \n  if (!rawPropType || line == null) {\n    console.log(`Skipping odd ${oddId}: missing prop type or line`);\n    return props;\n  }\n\n  // Normalize prop type using market mapping\n  const normalizedPropType = MARKET_MAP[rawPropType.toLowerCase()] || rawPropType;\n  \n  // Log unmapped markets for manual review\n  if (!MARKET_MAP[rawPropType.toLowerCase()]) {\n    console.warn(\"Unmapped market:\", {\n      rawMarket: rawPropType,\n      oddId: oddId,\n      player: playerName,\n      league: league\n    });\n  }\n\n  // Extract additional event information\n  const gameId = event.eventID || `${team}-${event.teams?.find((t: any) => t !== team)}-${gameDate}`;\n  const homeTeam = event.homeTeam || event.teams?.[0];\n  const awayTeam = event.awayTeam || event.teams?.[1];\n  const gameTime = event.date ? new Date(event.date) : new Date();\n\n  // Create the prop record matching proplines schema\n  const prop = {\n    player_id: playerID,\n    player_name: playerName,\n    team: team,\n    opponent: event.teams?.find((t: any) => t !== team) || null,\n    season: parseInt(season),\n    date: gameDate, // \u2705 REQUIRED field that was missing!\n    prop_type: normalizedPropType,\n    line: parseFloat(line),\n    over_odds: overOdds ? parseInt(overOdds) : null,\n    under_odds: underOdds ? parseInt(underOdds) : null,\n    sportsbook: sportsbook,\n    league: league.toLowerCase(),\n    game_id: gameId,\n    conflict_key: `${playerID}-${normalizedPropType}-${line}-${sportsbook}-${gameDate}`\n    // Removed extra fields that don't exist in schema:\n    // - sportsbook_key, game_time, home_team, away_team, week, last_updated, is_available\n  };\n\n  props.push(prop);\n  return props;\n}\n\nfunction mapBookmakerIdToName(bookmakerId: string): string {\n  const bookmakerMap: Record<string, string> = {\n    'draftkings': 'DraftKings',\n    'fanduel': 'FanDuel',\n    'betmgm': 'BetMGM',\n    'caesars': 'Caesars',\n    'pointsbet': 'PointsBet',\n    'betrivers': 'BetRivers',\n    'unibet': 'Unibet',\n    'sugarhouse': 'SugarHouse',\n    'foxbet': 'FOX Bet',\n    'bet365': 'Bet365',\n    'williamhill': 'William Hill',\n    'pinnacle': 'Pinnacle',\n    'betfair': 'Betfair',\n    'bovada': 'Bovada',\n    'mybookie': 'MyBookie',\n    'consensus': 'Consensus',\n    'unknown': 'Consensus'\n  };\n  \n  return bookmakerMap[bookmakerId.toLowerCase()] || 'Consensus';\n}\n", "// Missing Players Tracking System\n// This module handles storing unmapped players for later reconciliation\n\ninterface MissingPlayer {\n  player_name: string;\n  team: string;\n  league: string;\n  normalized_name: string;\n  generated_id: string;\n  first_seen: string;\n  last_seen: string;\n  count: number;\n  sample_odd_id?: string;\n}\n\n// Store missing players in Supabase for manual review\nexport async function storeMissingPlayer(\n  env: any, \n  playerName: string, \n  team: string, \n  league: string, \n  generatedId: string,\n  oddId?: string\n): Promise<void> {\n  try {\n    const missingPlayer: MissingPlayer = {\n      player_name: playerName,\n      team: team,\n      league: league,\n      normalized_name: normalizePlayerName(playerName),\n      generated_id: generatedId,\n      first_seen: new Date().toISOString(),\n      last_seen: new Date().toISOString(),\n      count: 1,\n      sample_odd_id: oddId\n    };\n\n    // Try to upsert into missing_players table\n    await fetch(`${env.SUPABASE_URL}/rest/v1/missing_players`, {\n      method: 'POST',\n      headers: {\n        'apikey': env.SUPABASE_SERVICE_KEY,\n        'Authorization': `Bearer ${env.SUPABASE_SERVICE_KEY}`,\n        'Content-Type': 'application/json',\n        'Prefer': 'resolution=merge-duplicates'\n      },\n      body: JSON.stringify(missingPlayer)\n    });\n\n    console.log(`\uD83D\uDCDD Stored missing player: ${playerName} (${team})`);\n  } catch (error) {\n    console.error(`\u274C Failed to store missing player ${playerName}:`, error);\n  }\n}\n\n// Normalize player name for consistent tracking\nfunction normalizePlayerName(name: string): string {\n  return name.toLowerCase()\n    .replace(/[^\\w\\s]/g, '') // Remove punctuation\n    .replace(/\\s+/g, ' ') // Normalize spaces\n    .replace(/\\s(jr|sr|iii|iv|v)$/i, '') // Remove suffixes\n    .trim();\n}\n\n// Get missing players for manual review\nexport async function getMissingPlayers(env: any, limit: number = 100): Promise<MissingPlayer[]> {\n  try {\n    const response = await fetch(`${env.SUPABASE_URL}/rest/v1/missing_players?order=count.desc&limit=${limit}`, {\n      headers: {\n        'apikey': env.SUPABASE_SERVICE_KEY,\n        'Authorization': `Bearer ${env.SUPABASE_SERVICE_KEY}`\n      }\n    });\n\n    if (!response.ok) {\n      throw new Error(`Failed to fetch missing players: ${response.statusText}`);\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error('\u274C Failed to fetch missing players:', error);\n    return [];\n  }\n}\n", "// Players Loader - Auto-populate PLAYER_ID_MAP from Supabase\nimport { supabaseFetch } from \"./supabaseFetch\";\nimport { normalizeName, generateNameVariations } from \"./normalizeName\";\n\ninterface Player {\n  player_id: string;\n  full_name: string;\n  team: string;\n  league: string;\n  position?: string;\n}\n\nexport async function loadPlayerIdMap(env: any): Promise<Record<string, string>> {\n  try {\n    console.log('\uD83D\uDD04 Loading players from Supabase...');\n    \n    // Pull all players (paginate if large)\n    const players = await supabaseFetch(env, \"players\", {\n      query: \"?select=player_id,full_name,team,league,position&limit=10000\"\n    });\n\n    if (!players || !Array.isArray(players)) {\n      console.error('\u274C Failed to load players from Supabase');\n      return {};\n    }\n\n    const map: Record<string, string> = {};\n    let loadedCount = 0;\n    let skippedCount = 0;\n\n    for (const player of players as Player[]) {\n      if (!player.full_name || !player.player_id) {\n        skippedCount++;\n        continue;\n      }\n\n      // Create primary mapping with normalized name\n      const normalizedKey = normalizeName(player.full_name);\n      map[normalizedKey] = player.player_id;\n      loadedCount++;\n\n      // Add variations for better matching\n      const variations = generateNameVariations(player.full_name);\n      for (const variation of variations) {\n        if (variation !== normalizedKey && !map[variation]) {\n          map[variation] = player.player_id;\n        }\n      }\n    }\n\n    console.log(`\u2705 Loaded ${loadedCount} players into PLAYER_ID_MAP (${Object.keys(map).length} total mappings)`);\n    console.log(`\u26A0\uFE0F Skipped ${skippedCount} players due to missing data`);\n    \n    return map;\n  } catch (error) {\n    console.error('\u274C Error loading player ID map:', error);\n    return {};\n  }\n}\n\n// Cache the player map to avoid repeated API calls\nlet playerMapCache: Record<string, string> | null = null;\nlet cacheTimestamp: number = 0;\nconst CACHE_TTL = 30 * 60 * 1000; // 30 minutes\n\nexport async function getCachedPlayerIdMap(env: any): Promise<Record<string, string>> {\n  const now = Date.now();\n  \n  // Return cached map if still valid\n  if (playerMapCache && (now - cacheTimestamp) < CACHE_TTL) {\n    return playerMapCache;\n  }\n  \n  // Load fresh map and update cache\n  playerMapCache = await loadPlayerIdMap(env);\n  cacheTimestamp = now;\n  \n  return playerMapCache;\n}\n\n// Load players by league for targeted updates\nexport async function loadPlayerIdMapByLeague(env: any, league: string): Promise<Record<string, string>> {\n  try {\n    console.log(`\uD83D\uDD04 Loading ${league} players from Supabase...`);\n    \n    const players = await supabaseFetch(env, \"players\", {\n      query: `?select=player_id,full_name,team,league,position&league=eq.${league}&limit=5000`\n    });\n\n    if (!players || !Array.isArray(players)) {\n      console.error(`\u274C Failed to load ${league} players from Supabase`);\n      return {};\n    }\n\n    const map: Record<string, string> = {};\n    let loadedCount = 0;\n\n    for (const player of players as Player[]) {\n      if (!player.full_name || !player.player_id) continue;\n\n      const normalizedKey = normalizeName(player.full_name);\n      map[normalizedKey] = player.player_id;\n      loadedCount++;\n\n      // Add variations\n      const variations = generateNameVariations(player.full_name);\n      for (const variation of variations) {\n        if (variation !== normalizedKey && !map[variation]) {\n          map[variation] = player.player_id;\n        }\n      }\n    }\n\n    console.log(`\u2705 Loaded ${loadedCount} ${league} players (${Object.keys(map).length} total mappings)`);\n    return map;\n  } catch (error) {\n    console.error(`\u274C Error loading ${league} player ID map:`, error);\n    return {};\n  }\n}\n\n// Update missing players table with successful mappings\nexport async function updateMissingPlayersSuccess(env: any, playerName: string, canonicalId: string): Promise<void> {\n  try {\n    const normalizedName = normalizeName(playerName);\n    \n    // Remove from missing players table since we now have a mapping\n    await fetch(`${env.SUPABASE_URL}/rest/v1/missing_players?normalized_name=eq.${normalizedName}`, {\n      method: 'DELETE',\n      headers: {\n        'apikey': env.SUPABASE_SERVICE_KEY,\n        'Authorization': `Bearer ${env.SUPABASE_SERVICE_KEY}`,\n        'Content-Type': 'application/json'\n      }\n    });\n    \n    console.log(`\u2705 Removed ${playerName} from missing players (mapped to ${canonicalId})`);\n  } catch (error) {\n    console.error(`\u274C Failed to update missing players for ${playerName}:`, error);\n  }\n}\n", "// Name normalization utility for consistent player matching\n// This function normalizes player names for mapping lookup\n\nexport function normalizeName(name: string): string {\n  return name.toLowerCase()\n    .replace(/[^\\w\\s]/g, '') // Remove punctuation\n    .replace(/\\s+/g, ' ') // Normalize spaces\n    .replace(/\\s(jr|sr|iii|iv|v)$/i, '') // Remove suffixes\n    .trim();\n}\n\n// Alternative normalization for more aggressive matching\nexport function aggressiveNormalizeName(name: string): string {\n  return name.toLowerCase()\n    .replace(/[^\\w]/g, '') // Remove all non-word characters\n    .replace(/\\s(jr|sr|iii|iv|v)$/i, '') // Remove suffixes\n    .trim();\n}\n\n// Generate possible name variations for fuzzy matching\nexport function generateNameVariations(name: string): string[] {\n  const normalized = normalizeName(name);\n  const variations = [normalized];\n  \n  // Add aggressive normalization\n  variations.push(aggressiveNormalizeName(name));\n  \n  // Add variations without common prefixes\n  const withoutPrefix = normalized.replace(/^(jr|sr|iii|iv|v)\\s+/i, '');\n  if (withoutPrefix !== normalized) {\n    variations.push(withoutPrefix);\n  }\n  \n  // Add first name only\n  const firstName = normalized.split(' ')[0];\n  if (firstName && firstName.length > 2) {\n    variations.push(firstName);\n  }\n  \n  // Add last name only\n  const lastName = normalized.split(' ').pop();\n  if (lastName && lastName.length > 2 && lastName !== firstName) {\n    variations.push(lastName);\n  }\n  \n  return [...new Set(variations)]; // Remove duplicates\n}\n", "// Central League Configuration with Multi-Season Support\n// Defines all leagues and seasons for comprehensive backfill operations\n\nexport interface LeagueConfig {\n  id: string;\n  displayName: string;\n  sport: string;\n  seasons: number[];\n  isActive: boolean;\n  oddIDs?: string; // Default odd IDs for this league\n}\n\nexport const LEAGUES: LeagueConfig[] = [\n  {\n    id: \"NFL\",\n    displayName: \"National Football League\",\n    sport: \"football\",\n    seasons: [2023, 2024, 2025],\n    isActive: true,\n    oddIDs: \"passing_yards-PLAYER_ID-game-ou-over,rushing_yards-PLAYER_ID-game-ou-over,receiving_yards-PLAYER_ID-game-ou-over,receptions-PLAYER_ID-game-ou-over,passing_touchdowns-PLAYER_ID-game-ou-over,rushing_touchdowns-PLAYER_ID-game-ou-over,receiving_touchdowns-PLAYER_ID-game-ou-over\"\n  },\n  {\n    id: \"NBA\",\n    displayName: \"National Basketball Association\",\n    sport: \"basketball\",\n    seasons: [2023, 2024, 2025],\n    isActive: true,\n    oddIDs: \"points-PLAYER_ID-game-ou-over,rebounds-PLAYER_ID-game-ou-over,assists-PLAYER_ID-game-ou-over,steals-PLAYER_ID-game-ou-over,blocks-PLAYER_ID-game-ou-over,threes_made-PLAYER_ID-game-ou-over,points_rebounds_assists-PLAYER_ID-game-ou-over\"\n  },\n  {\n    id: \"MLB\",\n    displayName: \"Major League Baseball\",\n    sport: \"baseball\",\n    seasons: [2023, 2024, 2025],\n    isActive: true,\n    oddIDs: \"hits-PLAYER_ID-game-ou-over,runs-PLAYER_ID-game-ou-over,rbis-PLAYER_ID-game-ou-over,total_bases-PLAYER_ID-game-ou-over,strikeouts-PLAYER_ID-game-ou-over,pitching_outs-PLAYER_ID-game-ou-over\"\n  },\n  {\n    id: \"NHL\",\n    displayName: \"National Hockey League\",\n    sport: \"hockey\",\n    seasons: [2023, 2024, 2025],\n    isActive: true,\n    oddIDs: \"shots_on_goal-PLAYER_ID-game-ou-over,points-PLAYER_ID-game-ou-over,goals-PLAYER_ID-game-ou-over,assists-PLAYER_ID-game-ou-over,saves-PLAYER_ID-game-ou-over\"\n  },\n  {\n    id: \"EPL\",\n    displayName: \"English Premier League\",\n    sport: \"soccer\",\n    seasons: [2023, 2024, 2025],\n    isActive: false, // Set to false if not actively ingesting\n    oddIDs: \"shots-PLAYER_ID-game-ou-over,shots_on_target-PLAYER_ID-game-ou-over,goals-PLAYER_ID-game-ou-over,assists-PLAYER_ID-game-ou-over,passes-PLAYER_ID-game-ou-over,tackles-PLAYER_ID-game-ou-over\"\n  },\n  {\n    id: \"NCAAF\",\n    displayName: \"NCAA Football\",\n    sport: \"football\",\n    seasons: [2023, 2024, 2025],\n    isActive: false,\n    oddIDs: \"passing_yards-PLAYER_ID-game-ou-over,rushing_yards-PLAYER_ID-game-ou-over,receiving_yards-PLAYER_ID-game-ou-over,receptions-PLAYER_ID-game-ou-over\"\n  },\n  {\n    id: \"NCAAB\",\n    displayName: \"NCAA Basketball\",\n    sport: \"basketball\",\n    seasons: [2023, 2024, 2025],\n    isActive: false,\n    oddIDs: \"points-PLAYER_ID-game-ou-over,rebounds-PLAYER_ID-game-ou-over,assists-PLAYER_ID-game-ou-over,threes_made-PLAYER_ID-game-ou-over\"\n  }\n];\n\n// Helper functions\nexport function getActiveLeagues(): LeagueConfig[] {\n  return LEAGUES.filter(league => league.isActive);\n}\n\nexport function getLeaguesInSeason(season: number): LeagueConfig[] {\n  return LEAGUES.filter(league => league.seasons.includes(season));\n}\n\nexport function getLeagueById(id: string): LeagueConfig | undefined {\n  return LEAGUES.find(league => league.id === id);\n}\n\nexport function getAllSeasons(): number[] {\n  const seasons = new Set<number>();\n  LEAGUES.forEach(league => {\n    league.seasons.forEach(season => seasons.add(season));\n  });\n  return Array.from(seasons).sort((a, b) => b - a); // Most recent first\n}\n\nexport function getLeagueSeasonPairs(): Array<{ league: LeagueConfig; season: number }> {\n  const pairs: Array<{ league: LeagueConfig; season: number }> = [];\n  LEAGUES.forEach(league => {\n    league.seasons.forEach(season => {\n      pairs.push({ league, season });\n    });\n  });\n  return pairs;\n}\n\nexport function getActiveLeagueSeasonPairs(): Array<{ league: LeagueConfig; season: number }> {\n  return getLeagueSeasonPairs().filter(({ league }) => league.isActive);\n}\n", "// Current Season Ingestion Job\n// Handles real-time ingestion for current season data\n\nimport { getEventsWithFallbacks } from \"../lib/api\";\nimport { extractPlayerPropsWithLogging } from \"../lib/extract\";\nimport { supabaseFetch } from \"../supabaseFetch\";\nimport { chunk } from \"../helpers\";\nimport { createPlayerPropsFromOdd } from \"../createPlayerPropsFromOdd\";\nimport { getActiveLeagues } from \"../config/leagues\";\n\nexport interface IngestionResult {\n  totalProps: number;\n  inserted: number;\n  updated: number;\n  errors: number;\n  leagues: Array<{\n    league: string;\n    props: number;\n    inserted: number;\n    errors: number;\n  }>;\n}\n\nexport async function runIngestion(env: any): Promise<IngestionResult> {\n  console.log(`\uD83D\uDD04 Starting current season ingestion...`);\n  \n  const startTime = Date.now();\n  let totalProps = 0;\n  let totalInserted = 0;\n  let totalUpdated = 0;\n  let totalErrors = 0;\n  const leagueResults: Array<{\n    league: string;\n    props: number;\n    inserted: number;\n    errors: number;\n  }> = [];\n  \n  const activeLeagues = getActiveLeagues();\n  console.log(`\uD83D\uDCCA Processing ${activeLeagues.length} active leagues: ${activeLeagues.map(l => l.id).join(', ')}`);\n  \n  for (const leagueConfig of activeLeagues) {\n    const { id: leagueID, season, oddIDs } = leagueConfig;\n    console.log(`\\n\uD83C\uDFC8 Starting ingestion for ${leagueID} ${season}`);\n    \n    try {\n      // Fetch events using fallback strategy\n      const { events, tier } = await getEventsWithFallbacks(env, leagueID, season, oddIDs);\n      console.log(`\uD83D\uDCCA ${leagueID}: Fetched ${events.length} events (tier ${tier})`);\n      \n      if (events.length === 0) {\n        console.log(`\u26A0\uFE0F ${leagueID}: No events found`);\n        leagueResults.push({ league: leagueID, props: 0, inserted: 0, errors: 0 });\n        continue;\n      }\n      \n      // Extract player props\n      const { props: extractedProps, stats } = extractPlayerPropsWithLogging(events);\n      console.log(`\uD83D\uDCCA ${leagueID}: Extracted ${extractedProps.length} player props`);\n      \n      if (extractedProps.length === 0) {\n        console.log(`\u26A0\uFE0F ${leagueID}: No player props extracted`);\n        leagueResults.push({ league: leagueID, props: 0, inserted: 0, errors: 0 });\n        continue;\n      }\n      \n      // Convert to proplines format\n      const mappedProps = [];\n      for (const prop of extractedProps) {\n        try {\n          // Create mock event and odd objects for createPlayerPropsFromOdd\n          const mockEvent = {\n            id: prop.eventId,\n            date: prop.eventStartUtc,\n            homeTeam: 'HOME',\n            awayTeam: 'AWAY',\n            teams: ['HOME', 'AWAY']\n          };\n          \n          const mockOdd = {\n            player_name: prop.playerName,\n            playerID: prop.playerId,\n            market_key: prop.marketName,\n            point: prop.line,\n            over_price: prop.overUnder === 'over' ? prop.odds : null,\n            under_price: prop.overUnder === 'under' ? prop.odds : null,\n            bookmaker_name: prop.sportsbook,\n            id: prop.oddId\n          };\n          \n          const eventProps = await createPlayerPropsFromOdd(\n            mockOdd, \n            prop.oddId, \n            mockEvent, \n            prop.league.toLowerCase(), \n            season.toString(), \n            undefined, \n            env\n          );\n          \n          mappedProps.push(...eventProps);\n          \n        } catch (error) {\n          console.error(`\u274C Error mapping prop ${prop.oddId}:`, error);\n          totalErrors++;\n        }\n      }\n      \n      console.log(`\uD83D\uDCCA ${leagueID}: Mapped ${mappedProps.length} props for insertion`);\n      totalProps += mappedProps.length;\n      \n      // Batch insert props\n      let leagueInserted = 0;\n      let leagueErrors = 0;\n      \n      if (mappedProps.length > 0) {\n        const propChunks = chunk(mappedProps, 500);\n        \n        for (let i = 0; i < propChunks.length; i++) {\n          try {\n            const { data, error } = await supabaseFetch(env, \"proplines\", {\n              method: \"POST\",\n              body: propChunks[i],\n              query: \"?on_conflict=conflict_key\"\n            });\n            \n            if (error) {\n              console.error(`\u274C ${leagueID}: Props batch ${i + 1} failed:`, error);\n              leagueErrors += propChunks[i].length;\n            } else {\n              leagueInserted += propChunks[i].length;\n              console.log(`\u2705 ${leagueID}: Inserted props batch ${i + 1}/${propChunks.length} (${propChunks[i].length} props)`);\n            }\n            \n          } catch (error) {\n            console.error(`\u274C ${leagueID}: Props batch ${i + 1} exception:`, error);\n            leagueErrors += propChunks[i].length;\n          }\n        }\n      }\n      \n      totalInserted += leagueInserted;\n      totalErrors += leagueErrors;\n      \n      leagueResults.push({\n        league: leagueID,\n        props: mappedProps.length,\n        inserted: leagueInserted,\n        errors: leagueErrors\n      });\n      \n      console.log(`\u2705 ${leagueID} ingestion complete: ${leagueInserted} inserted, ${leagueErrors} errors`);\n      \n    } catch (error) {\n      console.error(`\u274C ${leagueID} ingestion failed:`, error);\n      leagueResults.push({ league: leagueID, props: 0, inserted: 0, errors: 1 });\n      totalErrors++;\n    }\n  }\n  \n  const duration = Date.now() - startTime;\n  \n  console.log(`\\n\uD83C\uDF89 Current season ingestion complete:`);\n  console.log(`\u23F1\uFE0F Duration: ${Math.round(duration / 1000)}s`);\n  console.log(`\uD83D\uDCCA Total: ${totalProps} props processed, ${totalInserted} inserted, ${totalErrors} errors`);\n  console.log(`\uD83C\uDFC6 Leagues processed: ${leagueResults.length}`);\n  \n  return {\n    totalProps,\n    inserted: totalInserted,\n    updated: totalUpdated, // Not implemented yet\n    errors: totalErrors,\n    leagues: leagueResults\n  };\n}\n\n// Single league ingestion\nexport async function runSingleLeagueIngestion(env: any, leagueId: string): Promise<IngestionResult> {\n  console.log(`\uD83D\uDD04 Starting single league ingestion for ${leagueId}...`);\n  \n  const activeLeagues = getActiveLeagues();\n  const leagueConfig = activeLeagues.find(l => l.id === leagueId);\n  \n  if (!leagueConfig) {\n    throw new Error(`League ${leagueId} not found or not active`);\n  }\n  \n  // Temporarily set active leagues to just this one\n  const originalActiveLeagues = getActiveLeagues();\n  \n  try {\n    return await runIngestion(env);\n  } finally {\n    // Restore original active leagues (this is a bit of a hack, but works for now)\n    console.log(`\u2705 Single league ingestion complete for ${leagueId}`);\n  }\n}\n", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n"],
  "mappings": "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",
  "names": ["supabaseFetch", "fetchEventsWithProps", "extractPlayerProps", "url"]
}
