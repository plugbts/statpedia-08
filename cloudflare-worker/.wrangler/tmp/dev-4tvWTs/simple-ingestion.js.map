{
  "version": 3,
  "sources": ["../bundle-hMZNzw/checked-fetch.js", "../bundle-hMZNzw/strip-cf-connecting-ip-header.js", "../../../src/simple-ingestion.ts", "../../../node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-hMZNzw/middleware-insertion-facade.js", "../../../node_modules/wrangler/templates/middleware/common.ts", "../bundle-hMZNzw/middleware-loader.entry.ts"],
  "sourceRoot": "/Users/jackie/statpedia-08/cloudflare-worker/.wrangler/tmp/dev-4tvWTs",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "function stripCfConnectingIPHeader(input, init) {\n\tconst request = new Request(input, init);\n\trequest.headers.delete(\"CF-Connecting-IP\");\n\treturn request;\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\treturn Reflect.apply(target, thisArg, [\n\t\t\tstripCfConnectingIPHeader.apply(null, argArray),\n\t\t]);\n\t},\n});\n", "// Simple Prop Ingestion Worker - No complex imports\n// Handles heavy data processing without timeout constraints\n\n/// <reference types=\"@cloudflare/workers-types\" />\n\nexport interface Env {\n  SGO_API_KEY: string;\n  SUPABASE_URL: string;\n  SUPABASE_SERVICE_KEY: string;\n  CACHE_TTL_SECONDS?: string;\n  MAX_EVENTS_PER_REQUEST?: string;\n  MAX_PROPS_PER_REQUEST?: string;\n}\n\n// Canonical prop types mapping\nconst CANONICAL_PROP_TYPES: Record<string, string> = {\n  'passing_yards': 'Passing Yards',\n  'passing_completions': 'Passing Completions', \n  'passing_touchdowns': 'Passing TDs',\n  'rushing_yards': 'Rushing Yards',\n  'rushing_attempts': 'Rushing Attempts',\n  'rushing_touchdowns': 'Rushing TDs',\n  'receiving_yards': 'Receiving Yards',\n  'receptions': 'Receptions',\n  'receiving_touchdowns': 'Receiving TDs',\n  'passing_interceptions': 'Interceptions',\n  'extraPoints_kicksMade': 'Extra Points Made',\n  'fieldGoals_made': 'Field Goals Made',\n  'kicking_totalPoints': 'Kicking Total Points',\n  'firstTouchdown': 'First Touchdown',\n  'firstToScore': 'First to Score',\n  'points': 'Points',\n  'assists': 'Assists',\n  'rebounds': 'Rebounds',\n  'three_pointers_made': '3PM',\n  'steals': 'Steals',\n  'blocks': 'Blocks',\n  'turnovers': 'Turnovers',\n  'hits': 'Hits',\n  'runs': 'Runs',\n  'rbis': 'RBIs',\n  'home_runs': 'Home Runs',\n  'total_bases': 'Total Bases',\n  'stolen_bases': 'Stolen Bases',\n  'strikeouts': 'Pitcher Ks',\n  'outs': 'Pitcher Outs',\n  'earned_runs': 'ER Allowed',\n  'goals': 'Goals',\n  'shots_on_goal': 'Shots',\n  'power_play_points': 'PPP',\n  'saves': 'Saves'\n};\n\nconst SPORTSGAMEODDS_BASE_URL = 'https://api.sportsgameodds.com';\n\nexport default {\n  async fetch(request: Request, env: Env, ctx: ExecutionContext): Promise<Response> {\n    const url = new URL(request.url);\n    \n    // Handle CORS preflight\n    if (request.method === 'OPTIONS') {\n      return new Response(null, {\n        status: 200,\n        headers: {\n          'Access-Control-Allow-Origin': '*',\n          'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\n          'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n        },\n      });\n    }\n\n    // Route handling\n    if (url.pathname === '/ingest' && request.method === 'POST') {\n      return handleIngestion(request, env);\n    }\n    \n    if (url.pathname === '/ingest' && request.method === 'GET') {\n      return handleIngestionStatus(request, env);\n    }\n\n    return new Response('Prop Ingestion Worker - Use POST /ingest to start ingestion', {\n      status: 200,\n      headers: { 'Content-Type': 'text/plain' }\n    });\n  }\n};\n\nasync function handleIngestion(request: Request, env: Env): Promise<Response> {\n  try {\n    const body = await request.json();\n    const { league, season = '2025', week } = body;\n    \n    console.log(`Starting prop ingestion for league: ${league || 'all'}, season: ${season}, week: ${week || 'all'}`);\n    \n    const startTime = Date.now();\n    const results = await runIngestion(env, league, season, week);\n    const duration = Date.now() - startTime;\n    \n    return new Response(JSON.stringify({\n      success: true,\n      message: 'Prop ingestion completed successfully',\n      duration: `${duration}ms`,\n      ...results\n    }), {\n      status: 200,\n      headers: { \n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    });\n    \n  } catch (error) {\n    console.error('Ingestion failed:', error);\n    return new Response(JSON.stringify({\n      success: false,\n      message: 'Ingestion failed',\n      error: error instanceof Error ? error.message : 'Unknown error'\n    }), {\n      status: 500,\n      headers: { \n        'Content-Type': 'application/json',\n        'Access-Control-Allow-Origin': '*'\n      }\n    });\n  }\n}\n\nasync function handleIngestionStatus(request: Request, env: Env): Promise<Response> {\n  return new Response(JSON.stringify({\n    status: 'ready',\n    message: 'Prop ingestion worker is ready',\n    timestamp: new Date().toISOString()\n  }), {\n    status: 200,\n    headers: { \n      'Content-Type': 'application/json',\n      'Access-Control-Allow-Origin': '*'\n    }\n  });\n}\n\nasync function runIngestion(env: Env, league?: string, season: string = '2025', week?: string) {\n  console.log(`Starting prop ingestion for league: ${league || 'all'}, season: ${season}, week: ${week || 'all'}`);\n  \n  const startTime = Date.now();\n  let totalProps = 0;\n  let totalInserted = 0;\n  let totalUpdated = 0;\n  let totalErrors = 0;\n\n  // Process all leagues if no specific league provided\n  const leaguesToProcess = league ? [league] : ['NFL', 'NBA']; // Start with 2 leagues\n  \n  for (const currentLeague of leaguesToProcess) {\n    const sportID = currentLeague === 'NFL' || currentLeague === 'NCAAF' ? 'FOOTBALL' : \n                   currentLeague === 'NBA' || currentLeague === 'NCAAB' ? 'BASKETBALL' :\n                   currentLeague === 'MLB' ? 'BASEBALL' :\n                   currentLeague === 'NHL' ? 'HOCKEY' : 'FOOTBALL';\n    \n    console.log(`Processing ${currentLeague} (${sportID})`);\n    \n    try {\n      // Fetch events from SportsGameOdds API\n      console.log(`About to fetch events for sportID: ${sportID}, season: ${season}, week: ${week}`);\n      const events = await fetchEvents(env, sportID, season, week);\n      console.log(`Fetched ${events.length} events for ${currentLeague}`);\n      \n      if (events.length === 0) {\n        console.log(`No events found for ${currentLeague} - skipping`);\n        continue;\n      }\n\n      // Log details about the first few events\n      console.log(`First event details for ${currentLeague}:`, {\n        eventID: events[0]?.eventID,\n        teams: events[0]?.teams,\n        oddsCount: Object.keys(events[0]?.odds || {}).length,\n        hasOdds: !!events[0]?.odds\n      });\n\n      // Extract and process player props\n      for (const event of events) {\n        try {\n          console.log(`Processing event ${event.eventID} with ${Object.keys(event.odds || {}).length} odds`);\n          const props = await extractPlayerPropsFromEvent(event, currentLeague, season, week);\n          console.log(`Extracted ${props.length} props from event ${event.eventID}`);\n          \n          if (props.length > 0) {\n            console.log(`Found ${props.length} props in event ${event.eventID}`);\n            // Process all props\n            const upsertResult = await upsertProps(env, props);\n            totalInserted += upsertResult.inserted;\n            totalUpdated += upsertResult.updated;\n            totalErrors += upsertResult.errors;\n            totalProps += props.length;\n          }\n        } catch (error) {\n          console.error(`Error processing event ${event.eventID}:`, error);\n          totalErrors++;\n        }\n      }\n      \n    } catch (error) {\n      console.error(`Error processing league ${currentLeague}:`, error);\n      totalErrors++;\n    }\n  }\n\n  const duration = Date.now() - startTime;\n\n  return {\n    totalProps,\n    inserted: totalInserted,\n    updated: totalUpdated,\n    errors: totalErrors,\n    duration: `${duration}ms`,\n    leagues: league ? [league] : ['NFL', 'NBA']\n  };\n}\n\nasync function fetchEvents(env: Env, sportID: string, season: string, week?: string): Promise<any[]> {\n  let allEvents: any[] = [];\n  let nextCursor: string | null = null;\n  let pageCount = 0;\n  const maxPages = 2; // Conservative for testing\n\n  do {\n    try {\n      let endpoint = `/v2/events?sportID=${sportID}&season=${season}&oddsAvailable=true&markets=playerProps&limit=10`;\n      if (week) endpoint += `&week=${week}`;\n      if (nextCursor) endpoint += `&cursor=${nextCursor}`;\n      \n      console.log(`Making API call to: ${SPORTSGAMEODDS_BASE_URL}${endpoint}`);\n\n      const response = await fetch(`${SPORTSGAMEODDS_BASE_URL}${endpoint}`, {\n        headers: {\n          'Accept': 'application/json',\n          'User-Agent': 'Statpedia/1.0',\n          'x-api-key': env.SGO_API_KEY\n        }\n      });\n\n      if (!response.ok) {\n        console.error(`API request failed: ${response.status} ${response.statusText}`);\n        break;\n      }\n\n      const data = await response.json();\n      \n      if (!data.success || !data.data) {\n        console.error('API returned unsuccessful response:', data);\n        break;\n      }\n\n      const events = data.data;\n      allEvents.push(...events);\n      \n      console.log(`Page ${pageCount + 1}: Fetched ${events.length} events (${allEvents.length} total)`);\n      \n      // Check for next page\n      nextCursor = data.pagination?.nextCursor || null;\n      pageCount++;\n      \n    } catch (error) {\n      console.error(`Error fetching events (page ${pageCount + 1}):`, error);\n      break;\n    }\n  } while (nextCursor && pageCount < maxPages);\n\n  console.log(`Total events fetched: ${allEvents.length}`);\n  return allEvents;\n}\n\nasync function extractPlayerPropsFromEvent(event: any, league: string, season: string, week?: string): Promise<any[]> {\n  const props: any[] = [];\n  \n  let playerPropOdds = 0;\n  let processedOdds = 0;\n  let totalOdds = 0;\n\n  for (const [oddId, oddData] of Object.entries(event.odds || {})) {\n    totalOdds++;\n    try {\n      if (isPlayerProp(oddData, oddId)) {\n        playerPropOdds++;\n        const playerProps = await createPlayerPropsFromOdd(\n          oddData, \n          oddId, \n          event, \n          league, \n          season, \n          week\n        );\n        props.push(...playerProps);\n        processedOdds += playerProps.length;\n      }\n    } catch (error) {\n      console.error(`Error processing odd ${oddId}:`, error);\n    }\n  }\n\n  console.log(`Event ${event.eventID}: ${playerPropOdds} player prop odds found, ${processedOdds} props created out of ${totalOdds} total odds`);\n  return props;\n}\n\nfunction isPlayerProp(odd: any, oddId: string): boolean {\n  if (!odd || !oddId) return false;\n  \n  const oddIdParts = oddId.split('-');\n  if (oddIdParts.length < 5) return false;\n  \n  const [statID, playerID, periodID, betTypeID, sideID] = oddIdParts;\n  \n  // Check if the second part looks like a player ID (FIRSTNAME_LASTNAME_NUMBER_LEAGUE)\n  const isPlayerID = /^[A-Z_]+_[A-Z_]+_\\d+_[A-Z]+$/.test(playerID);\n  \n  // Check if it's an over/under bet\n  const isOverUnder = betTypeID === 'ou' || betTypeID === 'over_under';\n  \n  // Only process 'over' side - we'll handle both over and under from the same odd\n  const isOverSide = sideID === 'over';\n  \n  // Check if the statID is one we can normalize (or is a common player prop)\n  const normalizedStatID = statID.toLowerCase();\n  const isPlayerStat = Object.keys(CANONICAL_PROP_TYPES).includes(normalizedStatID) ||\n                      normalizedStatID.includes('passing') ||\n                      normalizedStatID.includes('rushing') ||\n                      normalizedStatID.includes('receiving') ||\n                      normalizedStatID.includes('touchdown') ||\n                      normalizedStatID.includes('yards') ||\n                      normalizedStatID.includes('receptions') ||\n                      normalizedStatID.includes('field') ||\n                      normalizedStatID.includes('kicking') ||\n                      normalizedStatID.includes('points');\n  \n  return isPlayerID && isOverUnder && isOverSide && isPlayerStat;\n}\n\nasync function createPlayerPropsFromOdd(odd: any, oddId: string, event: any, league: string, season: string, week?: string): Promise<any[]> {\n  const props: any[] = [];\n  \n  if (!oddId.includes('-over')) {\n    return props;\n  }\n  \n  const underOddId = oddId.replace('-over', '-under');\n  const underOdd = event.odds[underOddId];\n  \n  if (!underOdd) {\n    return props;\n  }\n\n  if (odd.byBookmaker) {\n    for (const [bookmakerId, bookmakerData] of Object.entries(odd.byBookmaker)) {\n      try {\n        const overData = bookmakerData;\n        \n        if (!overData.available) continue;\n\n        const underData = underOdd.byBookmaker?.[bookmakerId];\n        if (!underData || !underData.available) continue;\n\n        const prop = createIngestedPlayerProp(\n          odd,\n          oddId,\n          overData,\n          underData,\n          bookmakerId,\n          event,\n          league,\n          season,\n          week\n        );\n\n        if (prop) {\n          props.push(prop);\n        }\n      } catch (error) {\n        console.error(`Error processing bookmaker ${bookmakerId}:`, error);\n      }\n    }\n  }\n  \n  return props;\n}\n\nfunction createIngestedPlayerProp(odd: any, oddId: string, overData: any, underData: any, bookmakerId: string, event: any, league: string, season: string, week?: string): any {\n  try {\n    const oddIdParts = oddId.split('-');\n    \n    const playerID = oddIdParts.length >= 2 ? oddIdParts[1] : (odd.playerID || odd.statEntityID);\n    const statID = oddIdParts.length >= 1 ? oddIdParts[0] : odd.statID;\n    \n    const playerName = extractPlayerName(playerID);\n    const team = extractTeam(playerID, event.teams?.home?.names?.short, event.teams?.away?.names?.short);\n    const sportsbookName = mapBookmakerIdToName(bookmakerId);\n    \n    const propType = normalizePropType(statID);\n    const overOdds = parseOdds(overData.odds);\n    const underOdds = parseOdds(underData.odds);\n    const line = overData.overUnder || overData.line || 0;\n    \n    if (!overOdds || !underOdds || !line) {\n      return null;\n    }\n\n    const gameTime = new Date(event.status?.startsAt || new Date());\n    const gameDate = gameTime.toISOString().split('T')[0];\n    \n    if (!gameDate || gameDate === 'Invalid Date' || gameDate.includes('Invalid')) {\n      return null;\n    }\n\n    if (!playerID || !playerName || !team || !propType || !sportsbookName) {\n      return null;\n    }\n    \n    const conflictKey = `${playerID}-${propType}-${line}-${sportsbookName}-${gameDate}`;\n    \n    return {\n      player_id: playerID.substring(0, 64),\n      player_name: playerName.substring(0, 128),\n      team: team.substring(0, 8),\n      opponent: (team === event.teams?.home?.names?.short ? event.teams?.away?.names?.short : event.teams?.home?.names?.short)?.substring(0, 8) || 'UNKNOWN',\n      season: parseInt(season),\n      date: gameDate,\n      prop_type: propType.substring(0, 64),\n      line: line,\n      over_odds: overOdds,\n      under_odds: underOdds,\n      sportsbook: sportsbookName.substring(0, 32),\n      conflict_key: conflictKey\n    };\n  } catch (error) {\n    console.error('Error creating player prop:', error);\n    return null;\n  }\n}\n\nfunction extractPlayerName(playerID: string): string {\n  try {\n    const parts = playerID.split('_');\n    if (parts.length < 4) return 'Unknown Player';\n    \n    const firstName = parts[0].charAt(0) + parts[0].slice(1).toLowerCase();\n    const lastName = parts[1].charAt(0) + parts[1].slice(1).toLowerCase();\n    \n    return `${firstName} ${lastName}`;\n  } catch (error) {\n    return 'Unknown Player';\n  }\n}\n\nfunction extractTeam(playerID: string, homeTeam?: string, awayTeam?: string): string {\n  return Math.random() > 0.5 ? (homeTeam || 'HOME') : (awayTeam || 'AWAY');\n}\n\nfunction normalizePropType(statID: string): string {\n  return CANONICAL_PROP_TYPES[statID.toLowerCase()] || statID.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase());\n}\n\nfunction parseOdds(odds: any): number | null {\n  if (odds === null || odds === undefined) return null;\n  \n  if (typeof odds === 'number') return odds;\n  \n  if (typeof odds === 'string') {\n    const cleanOdds = odds.replace(/[^-+0-9]/g, '');\n    const parsed = parseInt(cleanOdds);\n    return isNaN(parsed) ? null : parsed;\n  }\n  \n  return null;\n}\n\nfunction mapBookmakerIdToName(bookmakerId: string): string {\n  const bookmakerMap: Record<string, string> = {\n    'fanduel': 'FanDuel',\n    'draftkings': 'Draft Kings',\n    'betmgm': 'BetMGM',\n    'caesars': 'Caesars',\n    'pointsbet': 'PointsBet',\n    'betrivers': 'BetRivers',\n    'foxbet': 'FOX Bet',\n    'bet365': 'bet365',\n    'williamhill': 'William Hill',\n    'pinnacle': 'Pinnacle',\n    'bovada': 'Bovada',\n    'betonline': 'BetOnline',\n    'betway': 'Betway',\n    'unibet': 'Unibet',\n    'ladbrokes': 'Ladbrokes',\n    'coral': 'Coral',\n    'paddypower': 'Paddy Power',\n    'skybet': 'Sky Bet',\n    'boylesports': 'BoyleSports',\n    'betfair': 'Betfair',\n    'betvictor': 'Bet Victor',\n    'betfred': 'Betfred',\n    'prizepicks': 'PrizePicks',\n    'fliff': 'Fliff',\n    'prophetexchange': 'Prophet Exchange',\n    'unknown': 'Unknown Sportsbook'\n  };\n\n  return bookmakerMap[bookmakerId.toLowerCase()] || bookmakerId;\n}\n\nasync function upsertProps(env: Env, props: any[]): Promise<{ inserted: number; updated: number; errors: number }> {\n  if (!props || props.length === 0) {\n    return { inserted: 0, updated: 0, errors: 0 };\n  }\n\n  let inserted = 0;\n  let updated = 0;\n  let errors = 0;\n\n  try {\n    // Create Supabase client\n    const supabaseUrl = env.SUPABASE_URL;\n    const supabaseKey = env.SUPABASE_SERVICE_KEY;\n    \n    const response = await fetch(`${supabaseUrl}/rest/v1/proplines`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${supabaseKey}`,\n        'apikey': supabaseKey,\n        'Prefer': 'resolution=merge-duplicates,return=minimal'\n      },\n      body: JSON.stringify(props)\n    });\n\n    if (!response.ok) {\n      const errorText = await response.text();\n      console.error('Supabase upsert failed:', response.status, errorText);\n      errors = props.length;\n    } else {\n      // With return=minimal, we don't get a response body, so assume success\n      inserted = props.length;\n    }\n  } catch (error) {\n    console.error('Error upserting props:', error);\n    errors = props.length;\n  }\n\n  return { inserted, updated, errors };\n}\n", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/Users/jackie/statpedia-08/cloudflare-worker/src/simple-ingestion.ts\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/Users/jackie/statpedia-08/cloudflare-worker/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"/Users/jackie/statpedia-08/cloudflare-worker/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"/Users/jackie/statpedia-08/cloudflare-worker/src/simple-ingestion.ts\";\n\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"/Users/jackie/statpedia-08/cloudflare-worker/.wrangler/tmp/bundle-hMZNzw/middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"/Users/jackie/statpedia-08/cloudflare-worker/node_modules/wrangler/templates/middleware/common.ts\";\nimport type { WorkerEntrypointConstructor } from \"/Users/jackie/statpedia-08/cloudflare-worker/.wrangler/tmp/bundle-hMZNzw/middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"/Users/jackie/statpedia-08/cloudflare-worker/.wrangler/tmp/bundle-hMZNzw/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": []
}
