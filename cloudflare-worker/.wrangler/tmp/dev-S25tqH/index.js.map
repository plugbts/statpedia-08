{
  "version": 3,
  "sources": ["../bundle-vr8Ana/checked-fetch.js", "../bundle-vr8Ana/strip-cf-connecting-ip-header.js", "../../../src/index.ts", "../../../node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-vr8Ana/middleware-insertion-facade.js", "../../../node_modules/wrangler/templates/middleware/common.ts", "../bundle-vr8Ana/middleware-loader.entry.ts"],
  "sourceRoot": "/Users/jackie/statpedia-08/cloudflare-worker/.wrangler/tmp/dev-S25tqH",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "function stripCfConnectingIPHeader(input, init) {\n\tconst request = new Request(input, init);\n\trequest.headers.delete(\"CF-Connecting-IP\");\n\treturn request;\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\treturn Reflect.apply(target, thisArg, [\n\t\t\tstripCfConnectingIPHeader.apply(null, argArray),\n\t\t]);\n\t},\n});\n", "// src/worker.ts\n\n/// <reference types=\"@cloudflare/workers-types\" />\n\nfunction corsHeaders(request: Request) {\n  const origin = request.headers.get(\"Origin\") || \"*\";\n  const reqHeaders = request.headers.get(\"Access-Control-Request-Headers\") || \"Content-Type, Authorization\";\n\n  return {\n    \"Access-Control-Allow-Origin\": origin, // echo back the origin\n    \"Access-Control-Allow-Methods\": \"GET,HEAD,POST,PUT,PATCH,DELETE,OPTIONS\",\n    \"Access-Control-Allow-Headers\": reqHeaders,\n    \"Access-Control-Allow-Credentials\": \"true\",\n    \"Access-Control-Max-Age\": \"86400\",\n  };\n}\n\nfunction handleOptions(request: Request) {\n  return new Response(null, { headers: corsHeaders(request) });\n}\n\nfunction withCORS(resp: Response, request: Request) {\n  const newHeaders = new Headers(resp.headers);\n  for (const [k, v] of Object.entries(corsHeaders(request))) {\n    newHeaders.set(k, v);\n  }\n  return new Response(resp.body, { status: resp.status, headers: newHeaders });\n}\n\nexport interface Env {\n  SPORTSODDS_API_KEY: string;\n  CACHE_LOCKS?: KVNamespace; // create a KV namespace for lock keys in wrangler.toml\n  PURGE_TOKEN?: string; // optional secret token for cache purge endpoint\n  METRICS?: KVNamespace; // KV namespace for storing metrics counters\n}\n\ntype Player = {\n  playerID: string;\n  teamID: string;\n  firstName: string;\n  lastName: string;\n  name: string;\n};\n\ntype BookData = {\n  odds?: string;\n  overUnder?: string;\n  lastUpdatedAt?: string;\n  available?: boolean;\n  deeplink?: string;\n};\n\ntype MarketSide = {\n  oddID: string;\n  opposingOddID?: string;\n  marketName: string;\n  statID: string;\n  statEntityID: string;\n  periodID: string;\n  betTypeID: string;\n  sideID: \"over\" | \"under\" | \"yes\" | \"no\";\n  playerID?: string;\n  started?: boolean;\n  ended?: boolean;\n  cancelled?: boolean;\n  bookOddsAvailable?: boolean;\n  fairOddsAvailable?: boolean;\n  fairOdds?: string;\n  bookOdds?: string;\n  fairOverUnder?: string;\n  bookOverUnder?: string;\n  openFairOdds?: string;\n  openBookOdds?: string;\n  openFairOverUnder?: string;\n  openBookOverUnder?: string;\n  scoringSupported?: boolean;\n  byBookmaker?: Record<string, BookData>;\n};\n\n// SportsGameOdds Event Schema\ntype SGEvent = {\n  event_id: string;\n  league_id: string;\n  start_time: string;\n  home_team: {\n    id: string;\n    name: string;\n    abbreviation?: string;\n  };\n  away_team: {\n    id: string;\n    name: string;\n    abbreviation?: string;\n  };\n  team_props?: any[];\n  player_props?: any[];\n  // Legacy fields for backward compatibility\n  eventID?: string;\n  leagueID?: string;\n  scheduled?: string;\n  teams?: {\n    home: { \n      teamID?: string;\n      id?: string;\n      abbreviation?: string;\n      names: { \n        long: string; \n        short: string;\n        abbr?: string;\n        full?: string;\n      } \n    };\n    away: { \n      teamID?: string;\n      id?: string;\n      abbreviation?: string;\n      names: { \n        long: string; \n        short: string;\n        abbr?: string;\n        full?: string;\n      } \n    };\n  };\n  status?: {\n    startsAt: string;\n  };\n  odds?: Record<string, MarketSide>;\n  players?: Record<string, Player>;\n};\n\nexport default {\n  async fetch(request: Request, env: Env, ctx: ExecutionContext): Promise<Response> {\n    if (request.method === \"OPTIONS\") {\n      return handleOptions(request);\n    }\n\n    const url = new URL(request.url);\n    let resp: Response;\n\n    // Debug endpoint: /debug/player-props?league=nfl&date=YYYY-MM-DD\n    if (url.pathname === \"/debug/player-props\") {\n      resp = await handleDebugPlayerProps(url, env);\n    }\n    // Raw debug endpoint: /api/debug-raw?league=nfl\n    else if (url.pathname === \"/api/debug-raw\") {\n      resp = await handlePropsDebug(request, env);\n    }\n    // Metrics endpoint: /metrics\n    else if (url.pathname === \"/metrics\") {\n      resp = await handleMetrics(url, request, env);\n    }\n    // Purge cache endpoint: /api/cache/purge?league=nfl&date=YYYY-MM-DD\n    else if (url.pathname === \"/api/cache/purge\") {\n      resp = await handleCachePurge(url, request, env);\n    }\n    // DEPRECATED: SportRadar proxy endpoint: /api/sportradar/*\n    else if (url.pathname.startsWith(\"/api/sportradar/\")) {\n      resp = new Response(\n        JSON.stringify({ \n          error: \"SportRadar API has been deprecated. Please use SportsGameOdds API instead.\",\n          migration: \"Use /api/{league}/player-props endpoint instead\"\n        }), \n        { \n          status: 410, // Gone\n          headers: { \"content-type\": \"application/json\" } \n        }\n      );\n    }\n    // Route: /api/{league}/player-props\n    else {\n    const match = url.pathname.match(/^\\/api\\/([a-z]+)\\/player-props$/);\n    if (match) {\n      const league = match[1].toLowerCase(); // e.g. nfl, nba\n        resp = await handlePlayerProps(request, env, ctx, league);\n      } else {\n        resp = new Response(\"Not found\", { status: 404 });\n      }\n    }\n\n    return withCORS(resp, request);\n  },\n};\n\nasync function handlePlayerProps(request: Request, env: Env, ctx: ExecutionContext, league: string): Promise<Response> {\n  return handlePropsEndpoint(request, env);\n}\n\nexport async function handlePropsDebug(request: Request, env: Env) {\n  const url = new URL(request.url);\n  const league = url.searchParams.get(\"league\") || \"nfl\";\n\n  try {\n    // 1. Fetch just ONE day to avoid hanging\n    const rawEvents = await fetchUpstreamProps(league.toUpperCase(), \"2025-10-04\", env);\n\n    // 2. Just dump the first event\n    const sample = rawEvents[0] || null;\n\n    return new Response(\n      JSON.stringify(\n        {\n          league,\n          rawCount: rawEvents.length,\n          sampleEvent: sample,\n        },\n        null,\n        2\n      ),\n      { headers: { \"content-type\": \"application/json\" } }\n    );\n  } catch (error) {\n    return new Response(\n      JSON.stringify(\n        {\n          error: \"Debug endpoint failed\",\n          message: error instanceof Error ? error.message : \"Unknown error\",\n        },\n        null,\n        2\n      ),\n      { headers: { \"content-type\": \"application/json\" } }\n    );\n  }\n}\n\nexport async function handlePropsEndpoint(request: Request, env: Env) {\n  try {\n    const url = new URL(request.url);\n    const leagues = (url.searchParams.get(\"league\") || \"nfl\")\n      .split(\",\")\n      .map(l => l.trim().toLowerCase());\n    const view = url.searchParams.get(\"view\") || \"full\";\n    const debug = url.searchParams.has(\"debug\");\n\n    const responseData: any = { events: [] };\n    const debugInfo: any = {};\n\n    for (const league of leagues) {\n      // 1. Fetch raw events from SportsGameOdds (single day for debugging)\n      const rawEvents = await fetchUpstreamProps(league.toUpperCase(), \"2025-10-05\", env);\n\n      // 2. Normalize events (limit to first 10 for performance)\n      let normalized = rawEvents\n        .slice(0, 10)\n        .map(ev => normalizeEventSGO(ev, request))\n        .filter(Boolean);\n\n      // 3. Group and normalize player props\n      for (const event of normalized) {\n        if (event.player_props?.length) {\n          groupPlayerProps(event, league);\n\n          if (debug) {\n            console.log(\"DEBUG prop summary\", {\n              eventID: event.eventID,\n              home: event.home_team,\n              away: event.away_team,\n              counts: summarizePropsByMarket(event, league)\n            });\n          }\n        }\n      }\n\n      // 4. Prioritize + cap props per league\n      normalized = capPropsPerLeague(normalized, league, 125);\n\n      // 5. Shape response\n      if (view === \"compact\") {\n        responseData.events.push(\n          ...normalized.filter((event): event is NonNullable<typeof event> => event !== null).map(event => ({\n            eventID: event.eventID,\n            leagueID: event.leagueID,\n            start_time: event.start_time,\n            home_team: event.home_team,\n            away_team: event.away_team,\n                    player_props: (event.player_props || []).map((prop: any) => {\n                      const over = pickBest((prop.books || []).filter((b: any) => String(b.side).toLowerCase() === \"over\"));\n                      const under = pickBest((prop.books || []).filter((b: any) => String(b.side).toLowerCase() === \"under\"));\n                      return {\n                        player_name: prop.player_name,\n                        market_type: formatMarketType(prop.market_type, event.leagueID),\n                        line: prop.line,\n                        best_over: over?.price ?? null,\n                        best_under: under?.price ?? null,\n                        best_over_book: over?.bookmaker ?? null,\n                        best_under_book: under?.bookmaker ?? null,\n                      };\n                    }),\n                    team_props: [],\n          }))\n        );\n      } else {\n        responseData.events.push(...normalized.filter((event): event is NonNullable<typeof event> => event !== null));\n      }\n\n      if (debug) {\n        debugInfo[league] = {\n          upstreamEvents: rawEvents.length,\n          normalizedEvents: normalized.length,\n          totalProps: normalized.filter((e): e is NonNullable<typeof e> => e !== null).reduce((a, e) => a + (e.player_props?.length || 0), 0),\n          sampleEvent: normalized[0] || null,\n        };\n      }\n    }\n\n    if (debug) responseData.debug = debugInfo;\n\n    return new Response(JSON.stringify(responseData), {\n      headers: { \"content-type\": \"application/json\" },\n    });\n  } catch (error) {\n    console.error(\"Error in handlePropsEndpoint:\", error);\n    return new Response(JSON.stringify({ \n      error: \"Internal server error\", \n      message: error instanceof Error ? error.message : \"Unknown error\" \n    }), {\n      status: 500,\n      headers: { \"content-type\": \"application/json\" },\n    });\n  }\n}\n\nasync function handleDebugPlayerProps(url: URL, env: Env): Promise<Response> {\n  const league = url.searchParams.get(\"league\")?.toUpperCase();\n  const date = url.searchParams.get(\"date\");\n  if (!league || !date) return json({ error: \"Missing league or date\" }, 400);\n\n  // Upstream: real data only\n  const upstream = new URL(\"https://api.sportsgameodds.com/v2/events\");\n  upstream.searchParams.set(\"leagueID\", league);\n  upstream.searchParams.set(\"date\", date);\n  upstream.searchParams.set(\"oddsAvailable\", \"true\");\n\n  const res = await fetch(upstream.toString(), {\n    headers: { 'x-api-key': env.SPORTSODDS_API_KEY },\n  });\n  if (!res.ok) return json({ error: \"Upstream error\", status: res.status }, 502);\n\n  const data = await res.json() as any;\n  const rawEvents = data?.data || [];\n  \n  // Strict, case-insensitive league filter\n  const events = rawEvents.filter((ev: any) => String(ev.leagueID).toUpperCase() === league);\n  \n  const normalized = events.map(debugNormalizeEvent);\n\n  const totalKept = normalized.reduce((a, ev) => a + (ev.debug_counts?.keptPlayerProps || 0), 0);\n  const totalDropped = normalized.reduce((a, ev) => a + (ev.debug_counts?.droppedPlayerProps || 0), 0);\n\n  return json({\n    events: normalized,\n      debug: { \n        upstreamEvents: rawEvents.length, \n      normalizedEvents: normalized.length,\n      totalKeptPlayerProps: totalKept,\n      totalDroppedPlayerProps: totalDropped,\n    },\n  });\n}\n\nasync function handleCachePurge(url: URL, request: Request, env: Env): Promise<Response> {\n  // Optional authentication check - disabled for now\n  // if (env.PURGE_TOKEN) {\n  //   const authHeader = request.headers.get(\"authorization\");\n  //   if (!authHeader || authHeader !== `Bearer ${env.PURGE_TOKEN}`) {\n  //     return new Response(\"Unauthorized\", { status: 401 });\n  //   }\n  // }\n\n  const league = url.searchParams.get(\"league\")?.toUpperCase();\n  const date = url.searchParams.get(\"date\");\n  if (!league || !date) {\n    return new Response(\"Missing league or date\", { status: 400 });\n  }\n\n  const cacheKey = buildCacheKey(url, league, date);\n  const cache = await caches.open('default');\n  const deleted = await cache.delete(cacheKey);\n\n  return new Response(\n    JSON.stringify({ message: \"Cache purged\", league, date, cacheKey, deleted }),\n    { \n        headers: {\n        \"content-type\": \"application/json\"\n      } \n    }\n  );\n}\n\n// DEPRECATED: SportRadar proxy function - removed\n// All SportRadar functionality has been migrated to SportsGameOdds API\n\nfunction buildUpstreamUrl(path: string, league: string, date: string, oddIDs?: string | null, bookmakerID?: string | null) {\n  const BASE_URL = \"https://api.sportsgameodds.com\";\n  const url = new URL(path, BASE_URL);\n  url.searchParams.set(\"oddsAvailable\", \"true\");\n  url.searchParams.set(\"leagueID\", league);\n  url.searchParams.set(\"date\", date);\n  // Only add oddIDs if explicitly provided by client\n  if (oddIDs) url.searchParams.set(\"oddIDs\", oddIDs);\n  if (bookmakerID) url.searchParams.set(\"bookmakerID\", bookmakerID);\n  return url.toString();\n}\n\nfunction buildCacheKey(url: URL, league: string, date: string, oddIDs?: string | null, bookmakerID?: string | null, view?: string | null, debug?: boolean) {\n  const key = new URL(\"https://edge-cache\");\n  key.pathname = `/api/${league}/player-props`;\n  key.searchParams.set(\"date\", date);\n  if (oddIDs) key.searchParams.set(\"oddIDs\", oddIDs);\n  if (bookmakerID) key.searchParams.set(\"bookmakerID\", bookmakerID);\n  if (view) key.searchParams.set(\"view\", view);\n  if (debug) key.searchParams.set(\"debug\", \"true\");\n  return key.toString();\n}\n\n\n// JSON helper\nfunction json(body: unknown, status = 200): Response {\n  return new Response(JSON.stringify(body), {\n    status,\n    headers: { \n      \"content-type\": \"application/json\"\n    },\n  });\n}\n\n// ===== Normalization =====\n\nfunction safeNormalizeEvent(ev: SGEvent) {\n  try {\n    return normalizeEvent(ev);\n  } catch (err) {\n    return {\n      eventID: ev?.eventID ?? null,\n      leagueID: ev?.leagueID ?? null,\n      start_time: ev?.scheduled ?? null,\n      home_team: {\n        id: ev?.teams?.home?.teamID ?? ev?.teams?.home?.id ?? null,\n        abbr: ev?.teams?.home?.abbreviation ?? ev?.teams?.home?.names?.abbr ?? null,\n        name: ev?.teams?.home?.names?.full ?? null,\n      },\n      away_team: {\n        id: ev?.teams?.away?.teamID ?? ev?.teams?.away?.id ?? null,\n        abbr: ev?.teams?.away?.abbreviation ?? ev?.teams?.away?.names?.abbr ?? null,\n        name: ev?.teams?.away?.names?.full ?? null,\n      },\n      team_props: [],\n      player_props: [],\n      _error: String(err),\n    };\n  }\n}\n\nfunction normalizeEventSGO(ev: any, request: any) {\n  // DEBUG: Log odds flattening\n  console.log(\"DEBUG odds flatten\", {\n    totalOdds: Object.keys(ev.odds || {}).length,\n    firstOdd: Object.values(ev.odds || {})[0]\n  });\n\n  return {\n    eventID: ev.eventID,\n    leagueID: ev.leagueID,\n    start_time: toUserTimeSGO(ev.status?.startsAt, request.cf?.timezone || \"America/New_York\"),\n    home_team: ev.teams?.home?.names?.long || \"UNK\",\n    away_team: ev.teams?.away?.names?.long || \"UNK\",\n    players: ev.players || {},\n    player_props: Object.values(ev.odds || {}), // flatten odds object\n  };\n}\n\nfunction normalizeEvent(ev: SGEvent) {\n  // Use SportsGameOdds schema as primary, fallback to legacy\n  const eventId = ev.event_id || ev.eventID;\n  const leagueId = ev.league_id || ev.leagueID;\n  const startTime = ev.start_time || ev.scheduled;\n  \n  console.log(`Normalizing event ${eventId} with SGO schema`);\n\n  // Use SGO's pre-normalized props if available, otherwise fall back to legacy normalization\n  let playerProps: any[] = [];\n  let teamProps: any[] = [];\n\n  if (ev.player_props && Array.isArray(ev.player_props)) {\n    // SGO already provides normalized player props\n    playerProps = ev.player_props;\n    console.log(`Using SGO player_props: ${playerProps.length} props`);\n  } else if (ev.odds && ev.players) {\n    // Fallback to legacy normalization for backward compatibility\n    console.log(`Falling back to legacy normalization`);\n  const players = ev.players || {};\n  const oddsDict = ev.odds || {};\n  \n    // Group by SGO identifiers to preserve all distinct prop types\n    const groups: Record<string, any[]> = {};\n  for (const oddID in oddsDict) {\n    const m = oddsDict[oddID];\n\n      // Build a composite key from SGO fields\n      const key = [\n        (m as any).player_id || \"\",     // which player/team this prop belongs to\n        (m as any).market_id || \"\",     // unique market identifier\n        (m as any).market_type || \"\",   // e.g. passing_yards, rushing_yards, points\n        (m as any).period || \"\",        // full_game, 1H, 1Q, etc.\n        (m as any).bet_type || \"\",      // over/under, yes/no\n      ].join(\"|\");\n\n    (groups[key] ||= []).push(m);\n  }\n  \n  console.log(`Created ${Object.keys(groups).length} groups`);\n\n  for (const key in groups) {\n    const markets = groups[key];\n    const hasPlayer = markets.some(mm => !!mm.playerID);\n    \n    console.log(`Group ${key}: hasPlayer=${hasPlayer}, markets=${markets.length}`);\n\n    if (hasPlayer) {\n        const norm = normalizePlayerGroup(markets, players, leagueId || \"NFL\");\n      if (norm) {\n        playerProps.push(norm);\n        console.log(`Added player prop: ${norm.player_name} ${norm.market_type}`);\n      } else {\n        console.log(`Failed to normalize player group: ${key}`);\n      }\n    } else {\n      const norm = normalizeTeamGroup(markets);\n      if (norm) teamProps.push(norm);\n      }\n    }\n  }\n\n  if (ev.team_props && Array.isArray(ev.team_props)) {\n    teamProps = ev.team_props;\n  }\n  \n  console.log(`Final counts: playerProps=${playerProps.length}, teamProps=${teamProps.length}`);\n\n  console.log(`Returning event ${eventId} with ${playerProps.length} player props and ${teamProps.length} team props`);\n  \n  return {\n    eventID: eventId,\n    leagueID: leagueId,\n    start_time: toUserTime(startTime || \"\", \"America/New_York\"),\n    home_team: normalizeTeamSGO(ev.home_team) || normalizeTeam(ev.teams?.home),\n    away_team: normalizeTeamSGO(ev.away_team) || normalizeTeam(ev.teams?.away),\n    team_props: teamProps,\n    player_props: playerProps,\n  };\n}\n\nfunction groupPlayerProps(event: any, league: string) {\n  const grouped: Record<string, any[]> = {};\n\n  for (const m of event.player_props) {\n    const key = [\n      m.playerID || \"\",\n      m.statID || \"\",\n      m.periodID || \"\",\n      m.betTypeID || \"\"\n    ].join(\"|\");\n    (grouped[key] ||= []).push(m);\n  }\n\n  // DEBUG: Log grouped props\n  console.log(\"DEBUG grouped props\", {\n    groups: Object.keys(grouped).length,\n    sample: Object.values(grouped)[0]\n  });\n\n  event.player_props = Object.values(grouped)\n    .map(group => normalizePlayerGroup(group, event.players, league))\n    .filter(Boolean);\n}\n\nfunction normalizePlayerGroup(markets: any[], players: Record<string, any>, league: string) {\n  const over = markets.find(m => m.sideID?.toLowerCase() === \"over\" || m.sideID?.toLowerCase() === \"yes\");\n  const under = markets.find(m => m.sideID?.toLowerCase() === \"under\" || m.sideID?.toLowerCase() === \"no\");\n  const base = over || under;\n  if (!base) return null;\n\n  const player = base.playerID ? players[base.playerID] : undefined;\n  const playerName = player?.name ?? null;\n\n  const allBooks = [...collectBooks(over), ...collectBooks(under)];\n  \n  return {\n    player_name: playerName,\n    teamID: player?.teamID ?? null,\n    market_type: formatMarketType(base.statID, league),\n    line: Number(base.bookOverUnder ?? null),\n    best_over: pickBest(allBooks.filter(b => b.side === \"over\")),\n    best_under: pickBest(allBooks.filter(b => b.side === \"under\")),\n    books: allBooks,\n  };\n}\n\nfunction normalizeSide(side: string | undefined): \"over\" | \"under\" | null {\n  if (!side) return null;\n  const s = side.toLowerCase();\n  if (s === \"over\" || s === \"yes\") return \"over\";\n  if (s === \"under\" || s === \"no\") return \"under\";\n  return null;\n}\n\nfunction collectBooks(side: any) {\n  if (!side) return [];\n  const books: any[] = [];\n  if (side.bookOdds || side.bookOverUnder) {\n    books.push({\n      bookmaker: \"consensus\",\n      side: normalizeSide(side.sideID),\n      price: side.bookOdds ?? null,\n      line: Number(side.bookOverUnder ?? null),\n    });\n  }\n  for (const [book, data] of Object.entries(side.byBookmaker || {})) {\n    const bookData = data as any;\n    if (!bookData.odds && !bookData.overUnder) continue;\n    books.push({\n      bookmaker: book,\n      side: normalizeSide(side.sideID),\n      price: bookData.odds ?? side.bookOdds ?? null,\n      line: Number(bookData.overUnder ?? side.bookOverUnder ?? null),\n      deeplink: bookData.deeplink,\n    });\n  }\n  return books;\n}\n\nfunction summarizePropsByMarket(event: any, league: string) {\n  const counts: Record<string, number> = {};\n\n  for (const prop of event.player_props || []) {\n    const label = formatMarketType(prop.market_type || prop.statID, league);\n    counts[label] = (counts[label] || 0) + 1;\n  }\n\n  return counts;\n}\n\nfunction normalizeTeamGroup(markets: MarketSide[]) {\n  const over = markets.find(m => isOverSide(m.sideID));\n  const under = markets.find(m => isUnderSide(m.sideID));\n  \n  // Never return null unless both sides are truly missing\n  if (!over && !under) return null;\n  \n  // Use whichever side exists as base\n  const base = over || under;\n  if (!base) return null;\n\n  const marketType = formatStatID(base.statID);\n  \n  // Resolve line: prefer bookOverUnder, fallback to fairOverUnder\n  const lineStr = firstDefined(over?.bookOverUnder, under?.bookOverUnder, over?.fairOverUnder, under?.fairOverUnder);\n  const line = toNumberOrNull(lineStr);\n\n  // Always collect books with consensus fallback\n  const books = [...collectBooks(over), ...collectBooks(under)];\n\n  // Pick best odds per side (handle single-sided markets)\n  const best_over = pickBest(books.filter(b => b.side === \"over\" || b.side === \"yes\"));\n  const best_under = pickBest(books.filter(b => b.side === \"under\" || b.side === \"no\"));\n\n  return {\n    market_type: marketType,\n    line,\n    best_over,\n    best_under,\n    books,\n    oddIDs: {\n      over: over?.oddID ?? null,\n      under: under?.oddID ?? null,\n      opposingOver: over?.opposingOddID ?? null,\n      opposingUnder: under?.opposingOddID ?? null,\n    },\n    status: {\n      started: !!(over?.started || under?.started),\n      ended: !!(over?.ended || under?.ended),\n      cancelled: !!(over?.cancelled || under?.cancelled),\n    },\n  };\n}\n\n\n// Helpers\n\nfunction isOverSide(side: any) {\n  const s = String(side || \"\").toLowerCase();\n  return s === \"over\" || s === \"yes\";\n}\nfunction isUnderSide(side: any) {\n  const s = String(side || \"\").toLowerCase();\n  return s === \"under\" || s === \"no\";\n}\n\nfunction formatStatID(statID: string) {\n  return (statID || \"\").replace(/_/g, \" \").replace(/\\b\\w/g, c => c.toUpperCase());\n}\n\nfunction extractNameFromMarket(marketName: string) {\n  return (marketName || \"\").replace(/\\s+(Passing|Rushing|Receiving|Attempts|Completions|Yards|Touchdowns|Interceptions|Receptions).*$/i, \"\");\n}\n\nfunction firstDefined<T>(...vals: (T | undefined | null)[]) {\n  for (const v of vals) if (v !== undefined && v !== null) return v;\n  return undefined;\n}\nfunction toNumberOrNull(s?: string | null) {\n  if (s === undefined || s === null) return null;\n  const n = parseFloat(s);\n  return Number.isFinite(n) ? n : null;\n}\n\nfunction parseAmerican(odds: string | number | null | undefined): number | null {\n  if (odds === null || odds === undefined) return null;\n  const s = String(odds).trim();\n  if (!s) return null;\n  const n = parseInt(s, 10);\n  return Number.isFinite(n) ? n : null;\n}\n\nfunction toUserTime(utcDate: string | Date, tz: string = \"America/New_York\") {\n  try {\n    const d = typeof utcDate === \"string\" ? new Date(utcDate) : utcDate;\n    if (isNaN(d.getTime())) return null; // invalid date guard\n\n    return d.toLocaleString(\"en-US\", {\n      timeZone: tz,\n      weekday: \"short\",\n      month: \"short\",\n      day: \"numeric\",\n      hour: \"numeric\",\n      minute: \"2-digit\",\n    });\n  } catch {\n    return null;\n  }\n}\n\nfunction toUserTimeSGO(utcDate: string | Date, tz: string = \"America/New_York\") {\n  try {\n    const d = typeof utcDate === \"string\" ? new Date(utcDate) : utcDate;\n    if (isNaN(d.getTime())) return null;\n    return d.toLocaleString(\"en-US\", {\n      timeZone: tz,\n      weekday: \"short\",\n      month: \"short\",\n      day: \"numeric\",\n      hour: \"numeric\",\n      minute: \"2-digit\",\n    });\n  } catch {\n    return null;\n  }\n}\n\nfunction normalizeTeam(team: any) {\n  if (!team) return { id: null, abbr: \"UNK\", name: \"Unknown\" };\n\n  return {\n    id: team.teamID ?? team.id ?? null,\n    abbr:\n      team.names?.short ??\n      team.abbreviation ??\n      team.names?.abbr ??\n      team.alias ??\n      team.displayName ??\n      \"UNK\",\n    name:\n      team.names?.long ??\n      team.names?.full ??\n      team.displayName ??\n      (team.market && team.name ? `${team.market} ${team.name}` : null) ??\n      team.alias ??\n      \"Unknown\",\n  };\n}\n\nfunction normalizeTeamSGO(team: any) {\n  if (!team) return { id: null, abbr: \"UNK\", name: \"TBD\" };\n\n  return {\n    id: team.id ?? null,\n    abbr: team.abbreviation ?? team.alias ?? team.short_name ?? \"UNK\",\n    name: team.name ?? team.full_name ?? team.display_name ?? \"TBD\",\n    logo: team.logo ?? null,\n  };\n}\n\n// Priority order: lower index = higher priority\nconst PROP_PRIORITY: Record<string, string[]> = {\n  nfl: [\n    \"passing_yards\",\n    \"rushing_yards\",\n    \"receiving_yards\",\n    \"receptions\",\n    \"touchdowns\",\n    \"first_touchdown\",\n    \"last_touchdown\",\n  ],\n  nba: [\n    \"points\",\n    \"rebounds\",\n    \"assists\",\n    \"threes_made\",\n    \"steals\",\n    \"blocks\",\n  ],\n  mlb: [\n    \"hits\",\n    \"home_runs\",\n    \"rbis\",\n    \"strikeouts\",\n    \"total_bases\",\n  ],\n  nhl: [\n    \"goals\",\n    \"assists\",\n    \"points\",\n    \"shots_on_goal\",\n    \"saves\",\n  ],\n  ncaaf: [\n    \"passing_yards\",\n    \"rushing_yards\",\n    \"receiving_yards\",\n    \"receptions\",\n    \"touchdowns\",\n  ],\n};\n\n// Global config for label formatting\nconst VIEW_MODE: \"compact\" | \"verbose\" = \"compact\"; \n// Change to \"verbose\" for full labels like \"1st Quarter\"\n\n// Period labels for different leagues\nconst PERIOD_LABELS: Record<string, Record<string, string>> = {\n  nfl: {\n    \"1q\": \"1st Quarter\",\n    \"2q\": \"2nd Quarter\",\n    \"3q\": \"3rd Quarter\",\n    \"4q\": \"4th Quarter\",\n    \"1h\": \"1st Half\",\n    \"2h\": \"2nd Half\",\n    ot: \"Overtime\",\n  },\n  nba: {\n    \"1q\": \"1st Quarter\",\n    \"2q\": \"2nd Quarter\",\n    \"3q\": \"3rd Quarter\",\n    \"4q\": \"4th Quarter\",\n    \"1h\": \"1st Half\",\n    \"2h\": \"2nd Half\",\n    ot: \"Overtime\",\n  },\n  ncaaf: {\n    \"1q\": \"1st Quarter\",\n    \"2q\": \"2nd Quarter\",\n    \"3q\": \"3rd Quarter\",\n    \"4q\": \"4th Quarter\",\n    \"1h\": \"1st Half\",\n    \"2h\": \"2nd Half\",\n    ot: \"Overtime\",\n  },\n  nhl: {\n    \"1p\": \"1st Period\",\n    \"2p\": \"2nd Period\",\n    \"3p\": \"3rd Period\",\n    ot: \"Overtime\",\n  },\n  mlb: {\n    \"1i\": \"1st Inning\",\n    \"2i\": \"2nd Inning\",\n    \"3i\": \"3rd Inning\",\n    \"4i\": \"4th Inning\",\n    \"5i\": \"5th Inning\",\n    \"6i\": \"6th Inning\",\n    \"7i\": \"7th Inning\",\n    \"8i\": \"8th Inning\",\n    \"9i\": \"9th Inning\",\n    ei: \"Extra Innings\",\n  },\n};\n\n// League-aware market type labels\nconst MARKET_LABELS: Record<string, Record<string, string>> = {\n  nfl: {\n    // Offensive player props\n    passing_yards: \"Passing Yards\",\n    rushing_yards: \"Rushing Yards\",\n    receiving_yards: \"Receiving Yards\",\n    receptions: \"Receptions\",\n    touchdowns: \"Touchdowns\",\n    first_touchdown: \"First Touchdown\",\n    last_touchdown: \"Last Touchdown\",\n    firstTouchdown: \"First Touchdown\",\n    lastTouchdown: \"Last Touchdown\",\n    anytime_touchdown: \"Anytime Touchdown\",\n    passing_touchdowns: \"Passing Touchdowns\",\n\n    // Defensive player props\n    defense_sacks: \"Sacks\",\n    defense_interceptions: \"Interceptions\",\n    defense_tackles: \"Tackles\",\n    defense_tackles_assists: \"Tackles + Assists\",\n    defense_passes_defended: \"Passes Defended\",\n    defense_forced_fumbles: \"Forced Fumbles\",\n    defense_fumble_recoveries: \"Fumble Recoveries\",\n\n    // Team props\n    team_total_points: \"Team Total Points\",\n    team_total_touchdowns: \"Team Total Touchdowns\",\n    team_total_field_goals: \"Team Total Field Goals\",\n    team_total_sacks: \"Team Total Sacks\",\n    team_total_interceptions: \"Team Total Interceptions\",\n  },\n  nba: {\n    points: \"Points\",\n    rebounds: \"Rebounds\",\n    assists: \"Assists\",\n    threes_made: \"3-Pointers Made\",\n    steals: \"Steals\",\n    blocks: \"Blocks\",\n\n    // Team props\n    team_total_points: \"Team Total Points\",\n    team_total_rebounds: \"Team Total Rebounds\",\n    team_total_assists: \"Team Total Assists\",\n    team_total_threes: \"Team Total 3-Pointers\",\n  },\n  mlb: {\n    hits: \"Hits\",\n    home_runs: \"Home Runs\",\n    rbis: \"RBIs\",\n    strikeouts: \"Strikeouts\",\n    total_bases: \"Total Bases\",\n\n    // Team props\n    team_total_runs: \"Team Total Runs\",\n    team_total_hits: \"Team Total Hits\",\n    team_total_home_runs: \"Team Total Home Runs\",\n  },\n  nhl: {\n    goals: \"Goals\",\n    assists: \"Assists\",\n    points: \"Points\",\n    shots_on_goal: \"Shots on Goal\",\n    saves: \"Saves\",\n\n    // Team props\n    team_total_goals: \"Team Total Goals\",\n    team_total_shots: \"Team Total Shots\",\n    team_total_saves: \"Team Total Saves\",\n  },\n  ncaaf: {\n    passing_yards: \"Passing Yards\",\n    rushing_yards: \"Rushing Yards\",\n    receiving_yards: \"Receiving Yards\",\n    receptions: \"Receptions\",\n    touchdowns: \"Touchdowns\",\n    defense_sacks: \"Sacks\",\n    defense_interceptions: \"Interceptions\",\n    defense_tackles: \"Tackles\",\n\n    // Team props\n    team_total_points: \"Team Total Points\",\n    team_total_touchdowns: \"Team Total Touchdowns\",\n  },\n};\n\nfunction formatMarketType(raw: string, league: string): string {\n  if (!raw) return \"Unknown\";\n\n  const leagueMap = MARKET_LABELS[league.toLowerCase()] || {};\n  if (leagueMap[raw]) return leagueMap[raw];\n\n  // Team total fallback\n  if (raw.startsWith(\"team_total_\")) {\n    const suffix = raw.replace(\"team_total_\", \"\");\n    return \"Team Total \" + suffix.replace(/_/g, \" \").replace(/\\b\\w/g, c => c.toUpperCase());\n  }\n\n  // Touchdown/score fallback\n  if (raw.includes(\"touchdown\") || raw.includes(\"score\")) {\n    return raw.replace(/_/g, \" \").replace(/\\b\\w/g, c => c.toUpperCase());\n  }\n\n  // Period-based fallback\n  const periodMatch = raw.match(/(.+)_([0-9]+[hqip]|[0-9]+h|ot|ei)$/i);\n  if (periodMatch) {\n    const base = periodMatch[1].replace(/_/g, \" \").replace(/\\b\\w/g, c => c.toUpperCase());\n    const periodCode = periodMatch[2].toLowerCase();\n\n    if (VIEW_MODE === \"verbose\") {\n      const leaguePeriods = PERIOD_LABELS[league.toLowerCase()] || {};\n      const label = leaguePeriods[periodCode];\n      if (label) return `${base} ${label}`;\n    }\n\n    return `${base} ${periodCode.toUpperCase()}`;\n  }\n\n  // Default fallback\n  return raw.replace(/_/g, \" \").replace(/\\b\\w/g, c => c.toUpperCase());\n}\n\nfunction sortPropsByLeague(props: any[], league: string) {\n  const priorities = PROP_PRIORITY[league.toLowerCase()] || [];\n  return props.sort((a, b) => {\n    const ai = priorities.indexOf(a.market_type);\n    const bi = priorities.indexOf(b.market_type);\n\n    // If both are in the priority list, sort by index\n    if (ai !== -1 && bi !== -1) return ai - bi;\n    // If only one is in the list, that one comes first\n    if (ai !== -1) return -1;\n    if (bi !== -1) return 1;\n    // Otherwise, leave them as-is\n    return 0;\n  });\n}\n\nfunction capPropsPerLeague(normalizedEvents: any[], league: string, maxProps: number = 125) {\n  let total = 0;\n\n  for (const event of normalizedEvents) {\n    const remaining = maxProps - total;\n    if (remaining <= 0) {\n      event.player_props = [];\n      continue;\n    }\n\n    // Sort props by league priority before slicing\n    const sorted = sortPropsByLeague(event.player_props || [], league);\n    event.player_props = sorted.slice(0, remaining);\n\n    total += event.player_props.length;\n  }\n\n  return normalizedEvents;\n}\n\nfunction getWeekRange(baseDate: Date = new Date(), days: number = 7) {\n  const start = new Date(baseDate);\n  const end = new Date(baseDate);\n  end.setDate(start.getDate() + (days - 1));\n  return {\n    start: start.toISOString().slice(0, 10),\n    end: end.toISOString().slice(0, 10),\n  };\n}\n\nasync function fetchUpstreamProps(league: string, date: string, env: Env) {\n  const upstreamUrl = buildUpstreamUrl(\"/v2/events\", league, date);\n  const res = await fetch(upstreamUrl, { headers: { 'x-api-key': env.SPORTSODDS_API_KEY } });\n  \n  if (!res.ok) {\n    console.log(`Failed to fetch ${league} props for ${date}: ${res.status}`);\n    return [];\n  }\n  \n  const data = await res.json() as any;\n  return data?.data || [];\n}\n\nasync function fetchLeagueWeek(league: string, baseDate: Date, env: Env) {\n  const { start, end } = getWeekRange(baseDate, 7);\n  const dates: string[] = [];\n  let d = new Date(start);\n  while (d <= new Date(end)) {\n    dates.push(d.toISOString().slice(0, 10));\n    d.setDate(d.getDate() + 1);\n  }\n\n  console.log(`Fetching ${league} props for dates: ${dates.join(', ')}`);\n\n  const results = await Promise.all(\n    dates.map(date => fetchUpstreamProps(league, date, env))\n  );\n\n  const flatResults = results.flat();\n  console.log(`Fetched ${flatResults.length} total events across ${dates.length} days`);\n  \n  return flatResults;\n}\n\nasync function fetchSportsGameOddsWeek(league: string, env: Env) {\n  const baseDate = new Date();\n  const { start, end } = getWeekRange(baseDate, 7);\n  const dates: string[] = [];\n  let d = new Date(start);\n  while (d <= new Date(end)) {\n    dates.push(d.toISOString().slice(0, 10));\n    d.setDate(d.getDate() + 1);\n  }\n\n  console.log(`Fetching ${league} props for dates: ${dates.join(', ')}`);\n\n  const results = await Promise.all(\n    dates.map(date => fetchUpstreamProps(league.toUpperCase(), date, env))\n  );\n\n  const flatResults = results.flat();\n  console.log(`Fetched ${flatResults.length} total events across ${dates.length} days`);\n  \n  return flatResults;\n}\n\n/**\n * Pick the best American odds from a list of book offers.\n * - For positive odds: higher is better (+250 is better than +200).\n * - For negative odds: closer to zero is better (-110 is better than -150).\n */\nfunction pickBest(books: { price: string | number | null; bookmaker?: string }[]): { price: string; bookmaker?: string } | null {\n  const candidates = books.filter(b => parseAmerican(b.price) !== null);\n  if (candidates.length === 0) return null;\n\n  const best = candidates.sort((a, b) => {\n    const A = parseAmerican(a.price)!;\n    const B = parseAmerican(b.price)!;\n\n    // Positive odds: maximize\n    if (A >= 0 && B >= 0) return B - A;\n    // Negative odds: closer to zero is better\n    if (A < 0 && B < 0) return A - B;\n    // Mixed: prefer the positive odds\n    return A >= 0 ? -1 : 1;\n  })[0];\n\n  return {\n    price: String(best.price),\n    bookmaker: best.bookmaker\n  };\n}\n\n// === Debug Normalization Functions ===\n\nfunction debugNormalizeEvent(ev: any) {\n  try {\n    return debugNormalizeEventInternal(ev);\n  } catch (err) {\n    return {\n      eventID: ev?.eventID,\n      leagueID: ev?.leagueID,\n      start_time: ev?.scheduled,\n      home_team: {\n        id: ev?.teams?.home?.teamID ?? ev?.teams?.home?.id ?? null,\n        abbr: ev?.teams?.home?.abbreviation ?? ev?.teams?.home?.names?.short ?? ev?.teams?.home?.names?.abbr ?? null,\n        name: ev?.teams?.home?.names?.long ?? ev?.teams?.home?.names?.full ?? null,\n      },\n      away_team: {\n        id: ev?.teams?.away?.teamID ?? ev?.teams?.away?.id ?? null,\n        abbr: ev?.teams?.away?.abbreviation ?? ev?.teams?.away?.names?.short ?? ev?.teams?.away?.names?.abbr ?? null,\n        name: ev?.teams?.away?.names?.long ?? ev?.teams?.away?.names?.full ?? null,\n      },\n      team_props: [],\n      player_props: [],\n      debug_counts: { keptPlayerProps: 0, droppedPlayerProps: 0 },\n      _error: String(err),\n    };\n  }\n}\n\nfunction debugNormalizeEventInternal(ev: any) {\n  const players = ev.players || {};\n  const oddsDict = ev.odds || {};\n\n  const groups: Record<string, any[]> = {};\n  for (const oddID in oddsDict) {\n    const m = oddsDict[oddID];\n    const key = [m.statEntityID || \"\", m.statID || \"\", m.periodID || \"\", m.betTypeID || \"\"].join(\"|\");\n    (groups[key] ||= []).push(m);\n  }\n\n  let keptPlayerProps = 0;\n  let droppedPlayerProps = 0;\n\n  const playerProps: any[] = [];\n  const teamProps: any[] = [];\n\n  for (const key in groups) {\n    const markets = groups[key];\n    const hasPlayer = markets.some(mm => !!mm.playerID);\n\n    if (hasPlayer) {\n      const norm = debugNormalizePlayerGroup(markets, players);\n      if (norm) {\n        playerProps.push(norm);\n        keptPlayerProps++;\n      } else {\n        droppedPlayerProps++;\n      }\n    } else {\n      const norm = debugNormalizeTeamGroup(markets);\n      if (norm) teamProps.push(norm);\n    }\n  }\n\n  return {\n    eventID: ev.eventID,\n    leagueID: ev.leagueID,\n    start_time: ev.scheduled,\n    home_team: {\n      id: ev.teams?.home?.teamID ?? ev.teams?.home?.id ?? null,\n      abbr: ev.teams?.home?.abbreviation ?? ev.teams?.home?.names?.short ?? ev.teams?.home?.names?.abbr ?? null,\n      name: ev.teams?.home?.names?.long ?? ev.teams?.home?.names?.full ?? null,\n    },\n    away_team: {\n      id: ev.teams?.away?.teamID ?? ev.teams?.away?.id ?? null,\n      abbr: ev.teams?.away?.abbreviation ?? ev.teams?.away?.names?.short ?? ev.teams?.away?.names?.abbr ?? null,\n      name: ev.teams?.away?.names?.long ?? ev.teams?.away?.names?.full ?? null,\n    },\n    team_props: teamProps,\n    player_props: playerProps,\n    debug_counts: { keptPlayerProps, droppedPlayerProps },\n  };\n}\n\nfunction debugNormalizePlayerGroup(markets: any[], players: Record<string, any>) {\n  const over = markets.find(m => isOverSide(m.sideID));\n  const under = markets.find(m => isUnderSide(m.sideID));\n  const base = over || under;\n  if (!base) return null;\n\n  const player = base.playerID ? players[base.playerID] : undefined;\n  const playerName = player?.name || base.marketName;\n  const marketType = formatMarketType(base.statID, \"NFL\");\n\n  const lineStr =\n    over?.bookOverUnder ?? under?.bookOverUnder ?? over?.fairOverUnder ?? under?.fairOverUnder ?? null;\n  const line = lineStr && isFinite(parseFloat(lineStr)) ? parseFloat(lineStr) : null;\n\n  const books: any[] = [];\n\n  for (const side of [over, under]) {\n    if (!side) continue;\n\n    // Consensus fallback from market-level fields (real data only)\n    if (side.bookOdds || side.bookOverUnder || side.fairOdds || side.fairOverUnder) {\n      books.push({\n        bookmaker: \"consensus\",\n        side: String(side.sideID).toLowerCase(),\n        price: side.bookOdds ?? side.fairOdds ?? \"\",\n        line: toNumberOrNull(side.bookOverUnder ?? side.fairOverUnder),\n      });\n    }\n\n    // Per-book odds if present\n    for (const [book, data] of Object.entries(side.byBookmaker || {})) {\n      const bookData = data as any;\n      if (!bookData || (!bookData.odds && !bookData.overUnder)) continue;\n      books.push({\n        bookmaker: book,\n        side: String(side.sideID).toLowerCase(),\n        price: bookData.odds ?? side.bookOdds ?? \"\",\n        line: toNumberOrNull(bookData.overUnder ?? side.bookOverUnder),\n        deeplink: bookData.deeplink,\n      });\n    }\n  }\n\n  // If absolutely no odds entries, still return the prop with minimal info (real player + market + line)\n  return {\n    player_name: playerName,\n    teamID: player?.teamID ?? null,\n    market_type: marketType,\n    line,\n    books,\n  };\n}\n\nfunction debugNormalizeTeamGroup(markets: any[]) {\n  // Optional: include team props for completeness\n  const over = markets.find(m => isOverSide(m.sideID));\n  const under = markets.find(m => isUnderSide(m.sideID));\n  const base = over || under;\n  if (!base) return null;\n\n  const marketType = base.statID;\n  const lineStr =\n    over?.bookOverUnder ?? under?.bookOverUnder ?? over?.fairOverUnder ?? under?.fairOverUnder ?? null;\n  const line = lineStr && isFinite(parseFloat(lineStr)) ? parseFloat(lineStr) : null;\n\n  const books: any[] = [];\n\n  for (const side of [over, under]) {\n    if (!side) continue;\n\n    if (side.bookOdds || side.bookOverUnder || side.fairOdds || side.fairOverUnder) {\n      books.push({\n        bookmaker: \"consensus\",\n        side: String(side.sideID).toLowerCase(),\n        price: side.bookOdds ?? side.fairOdds ?? \"\",\n        line: toNumberOrNull(side.bookOverUnder ?? side.fairOverUnder),\n      });\n    }\n    for (const [book, data] of Object.entries(side.byBookmaker || {})) {\n      const bookData = data as any;\n      if (!bookData || (!bookData.odds && !bookData.overUnder)) continue;\n      books.push({\n        bookmaker: book,\n        side: String(side.sideID).toLowerCase(),\n        price: bookData.odds ?? side.bookOdds ?? \"\",\n        line: toNumberOrNull(bookData.overUnder ?? side.bookOverUnder),\n        deeplink: bookData.deeplink,\n      });\n    }\n  }\n\n  return {\n    market_type: marketType,\n    line,\n    books,\n  };\n}\n\n// === Metrics Functions ===\n\nasync function handleMetrics(url: URL, request: Request, env: Env): Promise<Response> {\n  // Optional authentication check\n  if (env.PURGE_TOKEN) {\n    const authHeader = request.headers.get(\"authorization\");\n    if (!authHeader || authHeader !== `Bearer ${env.PURGE_TOKEN}`) {\n      return new Response(\"Unauthorized\", { status: 401 });\n    }\n  }\n\n  const reset = url.searchParams.get(\"reset\") === \"true\";\n  \n  try {\n    const metrics = await getMetrics(env, reset);\n    return new Response(JSON.stringify(metrics), {\n      headers: { \n        \"content-type\": \"application/json\"\n      }\n    });\n  } catch (error) {\n    return new Response(JSON.stringify({ error: \"Failed to get metrics\" }), {\n      status: 500,\n      headers: { \n        \"content-type\": \"application/json\"\n      }\n    });\n  }\n}\n\nasync function getMetrics(env: Env, reset: boolean = false): Promise<any> {\n  if (!env.METRICS) {\n    // Fallback to in-memory metrics if KV not available\n    return {\n      totalKeptPlayerProps: 0,\n      totalDroppedPlayerProps: 0,\n      cacheHits: 0,\n      cacheMisses: 0,\n      upstreamStatusCounts: { \"200\": 0, \"4xx\": 0, \"5xx\": 0 },\n      avgResponseTimeMs: 0,\n      totalRequests: 0,\n      lastUpdated: new Date().toISOString()\n    };\n  }\n\n  const keys = [\n    'totalKeptPlayerProps',\n    'totalDroppedPlayerProps', \n    'cacheHits',\n    'cacheMisses',\n    'upstreamStatus200',\n    'upstreamStatus4xx',\n    'upstreamStatus5xx',\n    'totalResponseTime',\n    'totalRequests'\n  ];\n\n  const values = await Promise.all(\n    keys.map(key => env.METRICS!.get(key).then(v => parseInt(v || '0', 10)))\n  );\n\n  const [\n    totalKeptPlayerProps,\n    totalDroppedPlayerProps,\n    cacheHits,\n    cacheMisses,\n    upstreamStatus200,\n    upstreamStatus4xx,\n    upstreamStatus5xx,\n    totalResponseTime,\n    totalRequests\n  ] = values;\n\n  const metrics = {\n    totalKeptPlayerProps,\n    totalDroppedPlayerProps,\n    cacheHits,\n    cacheMisses,\n    upstreamStatusCounts: {\n      \"200\": upstreamStatus200,\n      \"4xx\": upstreamStatus4xx,\n      \"5xx\": upstreamStatus5xx\n    },\n    avgResponseTimeMs: totalRequests > 0 ? Math.round(totalResponseTime / totalRequests) : 0,\n    totalRequests,\n    lastUpdated: new Date().toISOString()\n  };\n\n  if (reset) {\n    // Reset all counters\n    await Promise.all(keys.map(key => env.METRICS!.put(key, '0')));\n  }\n\n  return metrics;\n}\n\nasync function updateMetrics(env: Env, data: {\n  cacheHit: boolean;\n  keptProps?: number;\n  droppedProps?: number;\n  upstreamStatus?: number;\n  durationMs: number;\n}): Promise<void> {\n  if (!env.METRICS) return;\n\n  const updates: Promise<void>[] = [];\n\n  // Update cache counters\n  if (data.cacheHit) {\n    updates.push(env.METRICS.put('cacheHits', (await env.METRICS.get('cacheHits').then(v => parseInt(v || '0', 10)) + 1).toString()));\n  } else {\n    updates.push(env.METRICS.put('cacheMisses', (await env.METRICS.get('cacheMisses').then(v => parseInt(v || '0', 10)) + 1).toString()));\n  }\n\n  // Update prop counters\n  if (data.keptProps !== undefined) {\n    updates.push(env.METRICS.put('totalKeptPlayerProps', (await env.METRICS.get('totalKeptPlayerProps').then(v => parseInt(v || '0', 10)) + data.keptProps).toString()));\n  }\n  \n  if (data.droppedProps !== undefined) {\n    updates.push(env.METRICS.put('totalDroppedPlayerProps', (await env.METRICS.get('totalDroppedPlayerProps').then(v => parseInt(v || '0', 10)) + data.droppedProps).toString()));\n  }\n\n  // Update upstream status counters\n  if (data.upstreamStatus !== undefined) {\n    let statusKey = 'upstreamStatus5xx';\n    if (data.upstreamStatus === 200) {\n      statusKey = 'upstreamStatus200';\n    } else if (data.upstreamStatus >= 400 && data.upstreamStatus < 500) {\n      statusKey = 'upstreamStatus4xx';\n    }\n    \n    updates.push(env.METRICS.put(statusKey, (await env.METRICS.get(statusKey).then(v => parseInt(v || '0', 10)) + 1).toString()));\n  }\n\n  // Update response time and request count\n  updates.push(env.METRICS.put('totalResponseTime', (await env.METRICS.get('totalResponseTime').then(v => parseInt(v || '0', 10)) + data.durationMs).toString()));\n  updates.push(env.METRICS.put('totalRequests', (await env.METRICS.get('totalRequests').then(v => parseInt(v || '0', 10)) + 1).toString()));\n\n  await Promise.all(updates);\n}", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/Users/jackie/statpedia-08/cloudflare-worker/src/index.ts\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/Users/jackie/statpedia-08/cloudflare-worker/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"/Users/jackie/statpedia-08/cloudflare-worker/node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"/Users/jackie/statpedia-08/cloudflare-worker/src/index.ts\";\n\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"/Users/jackie/statpedia-08/cloudflare-worker/.wrangler/tmp/bundle-vr8Ana/middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"/Users/jackie/statpedia-08/cloudflare-worker/node_modules/wrangler/templates/middleware/common.ts\";\nimport type { WorkerEntrypointConstructor } from \"/Users/jackie/statpedia-08/cloudflare-worker/.wrangler/tmp/bundle-vr8Ana/middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"/Users/jackie/statpedia-08/cloudflare-worker/.wrangler/tmp/bundle-vr8Ana/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": ";;;;AAAA,IAAM,OAAO,oBAAI,IAAI;AAErB,SAAS,SAAS,SAAS,MAAM;AAChC,QAAM,MACL,mBAAmB,MAChB,UACA,IAAI;AAAA,KACH,OAAO,YAAY,WACjB,IAAI,QAAQ,SAAS,IAAI,IACzB,SACD;AAAA,EACH;AACH,MAAI,IAAI,QAAQ,IAAI,SAAS,SAAS,IAAI,aAAa,UAAU;AAChE,QAAI,CAAC,KAAK,IAAI,IAAI,SAAS,CAAC,GAAG;AAC9B,WAAK,IAAI,IAAI,SAAS,CAAC;AACvB,cAAQ;AAAA,QACP;AAAA,KACO,IAAI,SAAS;AAAA;AAAA,MACrB;AAAA,IACD;AAAA,EACD;AACD;AAnBS;AAqBT,WAAW,QAAQ,IAAI,MAAM,WAAW,OAAO;AAAA,EAC9C,MAAM,QAAQ,SAAS,UAAU;AAChC,UAAM,CAAC,SAAS,IAAI,IAAI;AACxB,aAAS,SAAS,IAAI;AACtB,WAAO,QAAQ,MAAM,QAAQ,SAAS,QAAQ;AAAA,EAC/C;AACD,CAAC;;;AC7BD,SAAS,0BAA0B,OAAO,MAAM;AAC/C,QAAM,UAAU,IAAI,QAAQ,OAAO,IAAI;AACvC,UAAQ,QAAQ,OAAO,kBAAkB;AACzC,SAAO;AACR;AAJS;AAMT,WAAW,QAAQ,IAAI,MAAM,WAAW,OAAO;AAAA,EAC9C,MAAM,QAAQ,SAAS,UAAU;AAChC,WAAO,QAAQ,MAAM,QAAQ,SAAS;AAAA,MACrC,0BAA0B,MAAM,MAAM,QAAQ;AAAA,IAC/C,CAAC;AAAA,EACF;AACD,CAAC;;;ACRD,SAAS,YAAY,SAAkB;AACrC,QAAM,SAAS,QAAQ,QAAQ,IAAI,QAAQ,KAAK;AAChD,QAAM,aAAa,QAAQ,QAAQ,IAAI,gCAAgC,KAAK;AAE5E,SAAO;AAAA,IACL,+BAA+B;AAAA;AAAA,IAC/B,gCAAgC;AAAA,IAChC,gCAAgC;AAAA,IAChC,oCAAoC;AAAA,IACpC,0BAA0B;AAAA,EAC5B;AACF;AAXS;AAaT,SAAS,cAAc,SAAkB;AACvC,SAAO,IAAI,SAAS,MAAM,EAAE,SAAS,YAAY,OAAO,EAAE,CAAC;AAC7D;AAFS;AAIT,SAAS,SAAS,MAAgB,SAAkB;AAClD,QAAM,aAAa,IAAI,QAAQ,KAAK,OAAO;AAC3C,aAAW,CAAC,GAAG,CAAC,KAAK,OAAO,QAAQ,YAAY,OAAO,CAAC,GAAG;AACzD,eAAW,IAAI,GAAG,CAAC;AAAA,EACrB;AACA,SAAO,IAAI,SAAS,KAAK,MAAM,EAAE,QAAQ,KAAK,QAAQ,SAAS,WAAW,CAAC;AAC7E;AANS;AA8GT,IAAO,cAAQ;AAAA,EACb,MAAM,MAAM,SAAkB,KAAU,KAA0C;AAChF,QAAI,QAAQ,WAAW,WAAW;AAChC,aAAO,cAAc,OAAO;AAAA,IAC9B;AAEA,UAAM,MAAM,IAAI,IAAI,QAAQ,GAAG;AAC/B,QAAI;AAGJ,QAAI,IAAI,aAAa,uBAAuB;AAC1C,aAAO,MAAM,uBAAuB,KAAK,GAAG;AAAA,IAC9C,WAES,IAAI,aAAa,kBAAkB;AAC1C,aAAO,MAAM,iBAAiB,SAAS,GAAG;AAAA,IAC5C,WAES,IAAI,aAAa,YAAY;AACpC,aAAO,MAAM,cAAc,KAAK,SAAS,GAAG;AAAA,IAC9C,WAES,IAAI,aAAa,oBAAoB;AAC5C,aAAO,MAAM,iBAAiB,KAAK,SAAS,GAAG;AAAA,IACjD,WAES,IAAI,SAAS,WAAW,kBAAkB,GAAG;AACpD,aAAO,IAAI;AAAA,QACT,KAAK,UAAU;AAAA,UACb,OAAO;AAAA,UACP,WAAW;AAAA,QACb,CAAC;AAAA,QACD;AAAA,UACE,QAAQ;AAAA;AAAA,UACR,SAAS,EAAE,gBAAgB,mBAAmB;AAAA,QAChD;AAAA,MACF;AAAA,IACF,OAEK;AACL,YAAM,QAAQ,IAAI,SAAS,MAAM,iCAAiC;AAClE,UAAI,OAAO;AACT,cAAM,SAAS,MAAM,CAAC,EAAE,YAAY;AAClC,eAAO,MAAM,kBAAkB,SAAS,KAAK,KAAK,MAAM;AAAA,MAC1D,OAAO;AACL,eAAO,IAAI,SAAS,aAAa,EAAE,QAAQ,IAAI,CAAC;AAAA,MAClD;AAAA,IACF;AAEA,WAAO,SAAS,MAAM,OAAO;AAAA,EAC/B;AACF;AAEA,eAAe,kBAAkB,SAAkB,KAAU,KAAuB,QAAmC;AACrH,SAAO,oBAAoB,SAAS,GAAG;AACzC;AAFe;AAIf,eAAsB,iBAAiB,SAAkB,KAAU;AACjE,QAAM,MAAM,IAAI,IAAI,QAAQ,GAAG;AAC/B,QAAM,SAAS,IAAI,aAAa,IAAI,QAAQ,KAAK;AAEjD,MAAI;AAEF,UAAM,YAAY,MAAM,mBAAmB,OAAO,YAAY,GAAG,cAAc,GAAG;AAGlF,UAAM,SAAS,UAAU,CAAC,KAAK;AAE/B,WAAO,IAAI;AAAA,MACT,KAAK;AAAA,QACH;AAAA,UACE;AAAA,UACA,UAAU,UAAU;AAAA,UACpB,aAAa;AAAA,QACf;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAAA,MACA,EAAE,SAAS,EAAE,gBAAgB,mBAAmB,EAAE;AAAA,IACpD;AAAA,EACF,SAAS,OAAP;AACA,WAAO,IAAI;AAAA,MACT,KAAK;AAAA,QACH;AAAA,UACE,OAAO;AAAA,UACP,SAAS,iBAAiB,QAAQ,MAAM,UAAU;AAAA,QACpD;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAAA,MACA,EAAE,SAAS,EAAE,gBAAgB,mBAAmB,EAAE;AAAA,IACpD;AAAA,EACF;AACF;AApCsB;AAsCtB,eAAsB,oBAAoB,SAAkB,KAAU;AACpE,MAAI;AACF,UAAM,MAAM,IAAI,IAAI,QAAQ,GAAG;AAC/B,UAAM,WAAW,IAAI,aAAa,IAAI,QAAQ,KAAK,OAChD,MAAM,GAAG,EACT,IAAI,OAAK,EAAE,KAAK,EAAE,YAAY,CAAC;AAClC,UAAM,OAAO,IAAI,aAAa,IAAI,MAAM,KAAK;AAC7C,UAAM,QAAQ,IAAI,aAAa,IAAI,OAAO;AAE1C,UAAM,eAAoB,EAAE,QAAQ,CAAC,EAAE;AACvC,UAAM,YAAiB,CAAC;AAExB,eAAW,UAAU,SAAS;AAE5B,YAAM,YAAY,MAAM,mBAAmB,OAAO,YAAY,GAAG,cAAc,GAAG;AAGlF,UAAI,aAAa,UACd,MAAM,GAAG,EAAE,EACX,IAAI,QAAM,kBAAkB,IAAI,OAAO,CAAC,EACxC,OAAO,OAAO;AAGjB,iBAAW,SAAS,YAAY;AAC9B,YAAI,MAAM,cAAc,QAAQ;AAC9B,2BAAiB,OAAO,MAAM;AAE9B,cAAI,OAAO;AACT,oBAAQ,IAAI,sBAAsB;AAAA,cAChC,SAAS,MAAM;AAAA,cACf,MAAM,MAAM;AAAA,cACZ,MAAM,MAAM;AAAA,cACZ,QAAQ,uBAAuB,OAAO,MAAM;AAAA,YAC9C,CAAC;AAAA,UACH;AAAA,QACF;AAAA,MACF;AAGA,mBAAa,kBAAkB,YAAY,QAAQ,GAAG;AAGtD,UAAI,SAAS,WAAW;AACtB,qBAAa,OAAO;AAAA,UAClB,GAAG,WAAW,OAAO,CAAC,UAA8C,UAAU,IAAI,EAAE,IAAI,YAAU;AAAA,YAChG,SAAS,MAAM;AAAA,YACf,UAAU,MAAM;AAAA,YAChB,YAAY,MAAM;AAAA,YAClB,WAAW,MAAM;AAAA,YACjB,WAAW,MAAM;AAAA,YACT,eAAe,MAAM,gBAAgB,CAAC,GAAG,IAAI,CAAC,SAAc;AAC1D,oBAAM,OAAO,UAAU,KAAK,SAAS,CAAC,GAAG,OAAO,CAAC,MAAW,OAAO,EAAE,IAAI,EAAE,YAAY,MAAM,MAAM,CAAC;AACpG,oBAAM,QAAQ,UAAU,KAAK,SAAS,CAAC,GAAG,OAAO,CAAC,MAAW,OAAO,EAAE,IAAI,EAAE,YAAY,MAAM,OAAO,CAAC;AACtG,qBAAO;AAAA,gBACL,aAAa,KAAK;AAAA,gBAClB,aAAa,iBAAiB,KAAK,aAAa,MAAM,QAAQ;AAAA,gBAC9D,MAAM,KAAK;AAAA,gBACX,WAAW,MAAM,SAAS;AAAA,gBAC1B,YAAY,OAAO,SAAS;AAAA,gBAC5B,gBAAgB,MAAM,aAAa;AAAA,gBACnC,iBAAiB,OAAO,aAAa;AAAA,cACvC;AAAA,YACF,CAAC;AAAA,YACD,YAAY,CAAC;AAAA,UACvB,EAAE;AAAA,QACJ;AAAA,MACF,OAAO;AACL,qBAAa,OAAO,KAAK,GAAG,WAAW,OAAO,CAAC,UAA8C,UAAU,IAAI,CAAC;AAAA,MAC9G;AAEA,UAAI,OAAO;AACT,kBAAU,MAAM,IAAI;AAAA,UAClB,gBAAgB,UAAU;AAAA,UAC1B,kBAAkB,WAAW;AAAA,UAC7B,YAAY,WAAW,OAAO,CAAC,MAAkC,MAAM,IAAI,EAAE,OAAO,CAAC,GAAG,MAAM,KAAK,EAAE,cAAc,UAAU,IAAI,CAAC;AAAA,UAClI,aAAa,WAAW,CAAC,KAAK;AAAA,QAChC;AAAA,MACF;AAAA,IACF;AAEA,QAAI;AAAO,mBAAa,QAAQ;AAEhC,WAAO,IAAI,SAAS,KAAK,UAAU,YAAY,GAAG;AAAA,MAChD,SAAS,EAAE,gBAAgB,mBAAmB;AAAA,IAChD,CAAC;AAAA,EACH,SAAS,OAAP;AACA,YAAQ,MAAM,iCAAiC,KAAK;AACpD,WAAO,IAAI,SAAS,KAAK,UAAU;AAAA,MACjC,OAAO;AAAA,MACP,SAAS,iBAAiB,QAAQ,MAAM,UAAU;AAAA,IACpD,CAAC,GAAG;AAAA,MACF,QAAQ;AAAA,MACR,SAAS,EAAE,gBAAgB,mBAAmB;AAAA,IAChD,CAAC;AAAA,EACH;AACF;AA/FsB;AAiGtB,eAAe,uBAAuB,KAAU,KAA6B;AAC3E,QAAM,SAAS,IAAI,aAAa,IAAI,QAAQ,GAAG,YAAY;AAC3D,QAAM,OAAO,IAAI,aAAa,IAAI,MAAM;AACxC,MAAI,CAAC,UAAU,CAAC;AAAM,WAAO,KAAK,EAAE,OAAO,yBAAyB,GAAG,GAAG;AAG1E,QAAM,WAAW,IAAI,IAAI,0CAA0C;AACnE,WAAS,aAAa,IAAI,YAAY,MAAM;AAC5C,WAAS,aAAa,IAAI,QAAQ,IAAI;AACtC,WAAS,aAAa,IAAI,iBAAiB,MAAM;AAEjD,QAAM,MAAM,MAAM,MAAM,SAAS,SAAS,GAAG;AAAA,IAC3C,SAAS,EAAE,aAAa,IAAI,mBAAmB;AAAA,EACjD,CAAC;AACD,MAAI,CAAC,IAAI;AAAI,WAAO,KAAK,EAAE,OAAO,kBAAkB,QAAQ,IAAI,OAAO,GAAG,GAAG;AAE7E,QAAM,OAAO,MAAM,IAAI,KAAK;AAC5B,QAAM,YAAY,MAAM,QAAQ,CAAC;AAGjC,QAAM,SAAS,UAAU,OAAO,CAAC,OAAY,OAAO,GAAG,QAAQ,EAAE,YAAY,MAAM,MAAM;AAEzF,QAAM,aAAa,OAAO,IAAI,mBAAmB;AAEjD,QAAM,YAAY,WAAW,OAAO,CAAC,GAAG,OAAO,KAAK,GAAG,cAAc,mBAAmB,IAAI,CAAC;AAC7F,QAAM,eAAe,WAAW,OAAO,CAAC,GAAG,OAAO,KAAK,GAAG,cAAc,sBAAsB,IAAI,CAAC;AAEnG,SAAO,KAAK;AAAA,IACV,QAAQ;AAAA,IACN,OAAO;AAAA,MACL,gBAAgB,UAAU;AAAA,MAC5B,kBAAkB,WAAW;AAAA,MAC7B,sBAAsB;AAAA,MACtB,yBAAyB;AAAA,IAC3B;AAAA,EACF,CAAC;AACH;AApCe;AAsCf,eAAe,iBAAiB,KAAU,SAAkB,KAA6B;AASvF,QAAM,SAAS,IAAI,aAAa,IAAI,QAAQ,GAAG,YAAY;AAC3D,QAAM,OAAO,IAAI,aAAa,IAAI,MAAM;AACxC,MAAI,CAAC,UAAU,CAAC,MAAM;AACpB,WAAO,IAAI,SAAS,0BAA0B,EAAE,QAAQ,IAAI,CAAC;AAAA,EAC/D;AAEA,QAAM,WAAW,cAAc,KAAK,QAAQ,IAAI;AAChD,QAAM,QAAQ,MAAM,OAAO,KAAK,SAAS;AACzC,QAAM,UAAU,MAAM,MAAM,OAAO,QAAQ;AAE3C,SAAO,IAAI;AAAA,IACT,KAAK,UAAU,EAAE,SAAS,gBAAgB,QAAQ,MAAM,UAAU,QAAQ,CAAC;AAAA,IAC3E;AAAA,MACI,SAAS;AAAA,QACT,gBAAgB;AAAA,MAClB;AAAA,IACF;AAAA,EACF;AACF;AA3Be;AAgCf,SAAS,iBAAiB,MAAc,QAAgB,MAAc,QAAwB,aAA6B;AACzH,QAAM,WAAW;AACjB,QAAM,MAAM,IAAI,IAAI,MAAM,QAAQ;AAClC,MAAI,aAAa,IAAI,iBAAiB,MAAM;AAC5C,MAAI,aAAa,IAAI,YAAY,MAAM;AACvC,MAAI,aAAa,IAAI,QAAQ,IAAI;AAEjC,MAAI;AAAQ,QAAI,aAAa,IAAI,UAAU,MAAM;AACjD,MAAI;AAAa,QAAI,aAAa,IAAI,eAAe,WAAW;AAChE,SAAO,IAAI,SAAS;AACtB;AAVS;AAYT,SAAS,cAAc,KAAU,QAAgB,MAAc,QAAwB,aAA6B,MAAsB,OAAiB;AACzJ,QAAM,MAAM,IAAI,IAAI,oBAAoB;AACxC,MAAI,WAAW,QAAQ;AACvB,MAAI,aAAa,IAAI,QAAQ,IAAI;AACjC,MAAI;AAAQ,QAAI,aAAa,IAAI,UAAU,MAAM;AACjD,MAAI;AAAa,QAAI,aAAa,IAAI,eAAe,WAAW;AAChE,MAAI;AAAM,QAAI,aAAa,IAAI,QAAQ,IAAI;AAC3C,MAAI;AAAO,QAAI,aAAa,IAAI,SAAS,MAAM;AAC/C,SAAO,IAAI,SAAS;AACtB;AATS;AAaT,SAAS,KAAK,MAAe,SAAS,KAAe;AACnD,SAAO,IAAI,SAAS,KAAK,UAAU,IAAI,GAAG;AAAA,IACxC;AAAA,IACA,SAAS;AAAA,MACP,gBAAgB;AAAA,IAClB;AAAA,EACF,CAAC;AACH;AAPS;AAoCT,SAAS,kBAAkB,IAAS,SAAc;AAEhD,UAAQ,IAAI,sBAAsB;AAAA,IAChC,WAAW,OAAO,KAAK,GAAG,QAAQ,CAAC,CAAC,EAAE;AAAA,IACtC,UAAU,OAAO,OAAO,GAAG,QAAQ,CAAC,CAAC,EAAE,CAAC;AAAA,EAC1C,CAAC;AAED,SAAO;AAAA,IACL,SAAS,GAAG;AAAA,IACZ,UAAU,GAAG;AAAA,IACb,YAAY,cAAc,GAAG,QAAQ,UAAU,QAAQ,IAAI,YAAY,kBAAkB;AAAA,IACzF,WAAW,GAAG,OAAO,MAAM,OAAO,QAAQ;AAAA,IAC1C,WAAW,GAAG,OAAO,MAAM,OAAO,QAAQ;AAAA,IAC1C,SAAS,GAAG,WAAW,CAAC;AAAA,IACxB,cAAc,OAAO,OAAO,GAAG,QAAQ,CAAC,CAAC;AAAA;AAAA,EAC3C;AACF;AAhBS;AAmGT,SAAS,iBAAiB,OAAY,QAAgB;AACpD,QAAM,UAAiC,CAAC;AAExC,aAAW,KAAK,MAAM,cAAc;AAClC,UAAM,MAAM;AAAA,MACV,EAAE,YAAY;AAAA,MACd,EAAE,UAAU;AAAA,MACZ,EAAE,YAAY;AAAA,MACd,EAAE,aAAa;AAAA,IACjB,EAAE,KAAK,GAAG;AACV,KAAC,QAAQ,GAAG,MAAM,CAAC,GAAG,KAAK,CAAC;AAAA,EAC9B;AAGA,UAAQ,IAAI,uBAAuB;AAAA,IACjC,QAAQ,OAAO,KAAK,OAAO,EAAE;AAAA,IAC7B,QAAQ,OAAO,OAAO,OAAO,EAAE,CAAC;AAAA,EAClC,CAAC;AAED,QAAM,eAAe,OAAO,OAAO,OAAO,EACvC,IAAI,WAAS,qBAAqB,OAAO,MAAM,SAAS,MAAM,CAAC,EAC/D,OAAO,OAAO;AACnB;AAtBS;AAwBT,SAAS,qBAAqB,SAAgB,SAA8B,QAAgB;AAC1F,QAAM,OAAO,QAAQ,KAAK,OAAK,EAAE,QAAQ,YAAY,MAAM,UAAU,EAAE,QAAQ,YAAY,MAAM,KAAK;AACtG,QAAM,QAAQ,QAAQ,KAAK,OAAK,EAAE,QAAQ,YAAY,MAAM,WAAW,EAAE,QAAQ,YAAY,MAAM,IAAI;AACvG,QAAM,OAAO,QAAQ;AACrB,MAAI,CAAC;AAAM,WAAO;AAElB,QAAM,SAAS,KAAK,WAAW,QAAQ,KAAK,QAAQ,IAAI;AACxD,QAAM,aAAa,QAAQ,QAAQ;AAEnC,QAAM,WAAW,CAAC,GAAG,aAAa,IAAI,GAAG,GAAG,aAAa,KAAK,CAAC;AAE/D,SAAO;AAAA,IACL,aAAa;AAAA,IACb,QAAQ,QAAQ,UAAU;AAAA,IAC1B,aAAa,iBAAiB,KAAK,QAAQ,MAAM;AAAA,IACjD,MAAM,OAAO,KAAK,iBAAiB,IAAI;AAAA,IACvC,WAAW,SAAS,SAAS,OAAO,OAAK,EAAE,SAAS,MAAM,CAAC;AAAA,IAC3D,YAAY,SAAS,SAAS,OAAO,OAAK,EAAE,SAAS,OAAO,CAAC;AAAA,IAC7D,OAAO;AAAA,EACT;AACF;AApBS;AAsBT,SAAS,cAAc,MAAmD;AACxE,MAAI,CAAC;AAAM,WAAO;AAClB,QAAM,IAAI,KAAK,YAAY;AAC3B,MAAI,MAAM,UAAU,MAAM;AAAO,WAAO;AACxC,MAAI,MAAM,WAAW,MAAM;AAAM,WAAO;AACxC,SAAO;AACT;AANS;AAQT,SAAS,aAAa,MAAW;AAC/B,MAAI,CAAC;AAAM,WAAO,CAAC;AACnB,QAAM,QAAe,CAAC;AACtB,MAAI,KAAK,YAAY,KAAK,eAAe;AACvC,UAAM,KAAK;AAAA,MACT,WAAW;AAAA,MACX,MAAM,cAAc,KAAK,MAAM;AAAA,MAC/B,OAAO,KAAK,YAAY;AAAA,MACxB,MAAM,OAAO,KAAK,iBAAiB,IAAI;AAAA,IACzC,CAAC;AAAA,EACH;AACA,aAAW,CAAC,MAAM,IAAI,KAAK,OAAO,QAAQ,KAAK,eAAe,CAAC,CAAC,GAAG;AACjE,UAAM,WAAW;AACjB,QAAI,CAAC,SAAS,QAAQ,CAAC,SAAS;AAAW;AAC3C,UAAM,KAAK;AAAA,MACT,WAAW;AAAA,MACX,MAAM,cAAc,KAAK,MAAM;AAAA,MAC/B,OAAO,SAAS,QAAQ,KAAK,YAAY;AAAA,MACzC,MAAM,OAAO,SAAS,aAAa,KAAK,iBAAiB,IAAI;AAAA,MAC7D,UAAU,SAAS;AAAA,IACrB,CAAC;AAAA,EACH;AACA,SAAO;AACT;AAvBS;AAyBT,SAAS,uBAAuB,OAAY,QAAgB;AAC1D,QAAM,SAAiC,CAAC;AAExC,aAAW,QAAQ,MAAM,gBAAgB,CAAC,GAAG;AAC3C,UAAM,QAAQ,iBAAiB,KAAK,eAAe,KAAK,QAAQ,MAAM;AACtE,WAAO,KAAK,KAAK,OAAO,KAAK,KAAK,KAAK;AAAA,EACzC;AAEA,SAAO;AACT;AATS;AA0DT,SAAS,WAAW,MAAW;AAC7B,QAAM,IAAI,OAAO,QAAQ,EAAE,EAAE,YAAY;AACzC,SAAO,MAAM,UAAU,MAAM;AAC/B;AAHS;AAIT,SAAS,YAAY,MAAW;AAC9B,QAAM,IAAI,OAAO,QAAQ,EAAE,EAAE,YAAY;AACzC,SAAO,MAAM,WAAW,MAAM;AAChC;AAHS;AAiBT,SAAS,eAAe,GAAmB;AACzC,MAAI,MAAM,UAAa,MAAM;AAAM,WAAO;AAC1C,QAAM,IAAI,WAAW,CAAC;AACtB,SAAO,OAAO,SAAS,CAAC,IAAI,IAAI;AAClC;AAJS;AAMT,SAAS,cAAc,MAAyD;AAC9E,MAAI,SAAS,QAAQ,SAAS;AAAW,WAAO;AAChD,QAAM,IAAI,OAAO,IAAI,EAAE,KAAK;AAC5B,MAAI,CAAC;AAAG,WAAO;AACf,QAAM,IAAI,SAAS,GAAG,EAAE;AACxB,SAAO,OAAO,SAAS,CAAC,IAAI,IAAI;AAClC;AANS;AA0BT,SAAS,cAAc,SAAwB,KAAa,oBAAoB;AAC9E,MAAI;AACF,UAAM,IAAI,OAAO,YAAY,WAAW,IAAI,KAAK,OAAO,IAAI;AAC5D,QAAI,MAAM,EAAE,QAAQ,CAAC;AAAG,aAAO;AAC/B,WAAO,EAAE,eAAe,SAAS;AAAA,MAC/B,UAAU;AAAA,MACV,SAAS;AAAA,MACT,OAAO;AAAA,MACP,KAAK;AAAA,MACL,MAAM;AAAA,MACN,QAAQ;AAAA,IACV,CAAC;AAAA,EACH,QAAE;AACA,WAAO;AAAA,EACT;AACF;AAfS;AAmDT,IAAM,gBAA0C;AAAA,EAC9C,KAAK;AAAA,IACH;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAAA,EACA,KAAK;AAAA,IACH;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAAA,EACA,KAAK;AAAA,IACH;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAAA,EACA,KAAK;AAAA,IACH;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAAA,EACA,OAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;AAGA,IAAM,YAAmC;AAIzC,IAAM,gBAAwD;AAAA,EAC5D,KAAK;AAAA,IACH,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,IAAI;AAAA,EACN;AAAA,EACA,KAAK;AAAA,IACH,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,IAAI;AAAA,EACN;AAAA,EACA,OAAO;AAAA,IACL,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,IAAI;AAAA,EACN;AAAA,EACA,KAAK;AAAA,IACH,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,IAAI;AAAA,EACN;AAAA,EACA,KAAK;AAAA,IACH,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,MAAM;AAAA,IACN,IAAI;AAAA,EACN;AACF;AAGA,IAAM,gBAAwD;AAAA,EAC5D,KAAK;AAAA;AAAA,IAEH,eAAe;AAAA,IACf,eAAe;AAAA,IACf,iBAAiB;AAAA,IACjB,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,iBAAiB;AAAA,IACjB,gBAAgB;AAAA,IAChB,gBAAgB;AAAA,IAChB,eAAe;AAAA,IACf,mBAAmB;AAAA,IACnB,oBAAoB;AAAA;AAAA,IAGpB,eAAe;AAAA,IACf,uBAAuB;AAAA,IACvB,iBAAiB;AAAA,IACjB,yBAAyB;AAAA,IACzB,yBAAyB;AAAA,IACzB,wBAAwB;AAAA,IACxB,2BAA2B;AAAA;AAAA,IAG3B,mBAAmB;AAAA,IACnB,uBAAuB;AAAA,IACvB,wBAAwB;AAAA,IACxB,kBAAkB;AAAA,IAClB,0BAA0B;AAAA,EAC5B;AAAA,EACA,KAAK;AAAA,IACH,QAAQ;AAAA,IACR,UAAU;AAAA,IACV,SAAS;AAAA,IACT,aAAa;AAAA,IACb,QAAQ;AAAA,IACR,QAAQ;AAAA;AAAA,IAGR,mBAAmB;AAAA,IACnB,qBAAqB;AAAA,IACrB,oBAAoB;AAAA,IACpB,mBAAmB;AAAA,EACrB;AAAA,EACA,KAAK;AAAA,IACH,MAAM;AAAA,IACN,WAAW;AAAA,IACX,MAAM;AAAA,IACN,YAAY;AAAA,IACZ,aAAa;AAAA;AAAA,IAGb,iBAAiB;AAAA,IACjB,iBAAiB;AAAA,IACjB,sBAAsB;AAAA,EACxB;AAAA,EACA,KAAK;AAAA,IACH,OAAO;AAAA,IACP,SAAS;AAAA,IACT,QAAQ;AAAA,IACR,eAAe;AAAA,IACf,OAAO;AAAA;AAAA,IAGP,kBAAkB;AAAA,IAClB,kBAAkB;AAAA,IAClB,kBAAkB;AAAA,EACpB;AAAA,EACA,OAAO;AAAA,IACL,eAAe;AAAA,IACf,eAAe;AAAA,IACf,iBAAiB;AAAA,IACjB,YAAY;AAAA,IACZ,YAAY;AAAA,IACZ,eAAe;AAAA,IACf,uBAAuB;AAAA,IACvB,iBAAiB;AAAA;AAAA,IAGjB,mBAAmB;AAAA,IACnB,uBAAuB;AAAA,EACzB;AACF;AAEA,SAAS,iBAAiB,KAAa,QAAwB;AAC7D,MAAI,CAAC;AAAK,WAAO;AAEjB,QAAM,YAAY,cAAc,OAAO,YAAY,CAAC,KAAK,CAAC;AAC1D,MAAI,UAAU,GAAG;AAAG,WAAO,UAAU,GAAG;AAGxC,MAAI,IAAI,WAAW,aAAa,GAAG;AACjC,UAAM,SAAS,IAAI,QAAQ,eAAe,EAAE;AAC5C,WAAO,gBAAgB,OAAO,QAAQ,MAAM,GAAG,EAAE,QAAQ,SAAS,OAAK,EAAE,YAAY,CAAC;AAAA,EACxF;AAGA,MAAI,IAAI,SAAS,WAAW,KAAK,IAAI,SAAS,OAAO,GAAG;AACtD,WAAO,IAAI,QAAQ,MAAM,GAAG,EAAE,QAAQ,SAAS,OAAK,EAAE,YAAY,CAAC;AAAA,EACrE;AAGA,QAAM,cAAc,IAAI,MAAM,qCAAqC;AACnE,MAAI,aAAa;AACf,UAAM,OAAO,YAAY,CAAC,EAAE,QAAQ,MAAM,GAAG,EAAE,QAAQ,SAAS,OAAK,EAAE,YAAY,CAAC;AACpF,UAAM,aAAa,YAAY,CAAC,EAAE,YAAY;AAE9C,QAAI,cAAc,WAAW;AAC3B,YAAM,gBAAgB,cAAc,OAAO,YAAY,CAAC,KAAK,CAAC;AAC9D,YAAM,QAAQ,cAAc,UAAU;AACtC,UAAI;AAAO,eAAO,GAAG,QAAQ;AAAA,IAC/B;AAEA,WAAO,GAAG,QAAQ,WAAW,YAAY;AAAA,EAC3C;AAGA,SAAO,IAAI,QAAQ,MAAM,GAAG,EAAE,QAAQ,SAAS,OAAK,EAAE,YAAY,CAAC;AACrE;AAlCS;AAoCT,SAAS,kBAAkB,OAAc,QAAgB;AACvD,QAAM,aAAa,cAAc,OAAO,YAAY,CAAC,KAAK,CAAC;AAC3D,SAAO,MAAM,KAAK,CAAC,GAAG,MAAM;AAC1B,UAAM,KAAK,WAAW,QAAQ,EAAE,WAAW;AAC3C,UAAM,KAAK,WAAW,QAAQ,EAAE,WAAW;AAG3C,QAAI,OAAO,MAAM,OAAO;AAAI,aAAO,KAAK;AAExC,QAAI,OAAO;AAAI,aAAO;AACtB,QAAI,OAAO;AAAI,aAAO;AAEtB,WAAO;AAAA,EACT,CAAC;AACH;AAdS;AAgBT,SAAS,kBAAkB,kBAAyB,QAAgB,WAAmB,KAAK;AAC1F,MAAI,QAAQ;AAEZ,aAAW,SAAS,kBAAkB;AACpC,UAAM,YAAY,WAAW;AAC7B,QAAI,aAAa,GAAG;AAClB,YAAM,eAAe,CAAC;AACtB;AAAA,IACF;AAGA,UAAM,SAAS,kBAAkB,MAAM,gBAAgB,CAAC,GAAG,MAAM;AACjE,UAAM,eAAe,OAAO,MAAM,GAAG,SAAS;AAE9C,aAAS,MAAM,aAAa;AAAA,EAC9B;AAEA,SAAO;AACT;AAlBS;AA8BT,eAAe,mBAAmB,QAAgB,MAAc,KAAU;AACxE,QAAM,cAAc,iBAAiB,cAAc,QAAQ,IAAI;AAC/D,QAAM,MAAM,MAAM,MAAM,aAAa,EAAE,SAAS,EAAE,aAAa,IAAI,mBAAmB,EAAE,CAAC;AAEzF,MAAI,CAAC,IAAI,IAAI;AACX,YAAQ,IAAI,mBAAmB,oBAAoB,SAAS,IAAI,QAAQ;AACxE,WAAO,CAAC;AAAA,EACV;AAEA,QAAM,OAAO,MAAM,IAAI,KAAK;AAC5B,SAAO,MAAM,QAAQ,CAAC;AACxB;AAXe;AA6Df,SAAS,SAAS,OAA8G;AAC9H,QAAM,aAAa,MAAM,OAAO,OAAK,cAAc,EAAE,KAAK,MAAM,IAAI;AACpE,MAAI,WAAW,WAAW;AAAG,WAAO;AAEpC,QAAM,OAAO,WAAW,KAAK,CAAC,GAAG,MAAM;AACrC,UAAM,IAAI,cAAc,EAAE,KAAK;AAC/B,UAAM,IAAI,cAAc,EAAE,KAAK;AAG/B,QAAI,KAAK,KAAK,KAAK;AAAG,aAAO,IAAI;AAEjC,QAAI,IAAI,KAAK,IAAI;AAAG,aAAO,IAAI;AAE/B,WAAO,KAAK,IAAI,KAAK;AAAA,EACvB,CAAC,EAAE,CAAC;AAEJ,SAAO;AAAA,IACL,OAAO,OAAO,KAAK,KAAK;AAAA,IACxB,WAAW,KAAK;AAAA,EAClB;AACF;AApBS;AAwBT,SAAS,oBAAoB,IAAS;AACpC,MAAI;AACF,WAAO,4BAA4B,EAAE;AAAA,EACvC,SAAS,KAAP;AACA,WAAO;AAAA,MACL,SAAS,IAAI;AAAA,MACb,UAAU,IAAI;AAAA,MACd,YAAY,IAAI;AAAA,MAChB,WAAW;AAAA,QACT,IAAI,IAAI,OAAO,MAAM,UAAU,IAAI,OAAO,MAAM,MAAM;AAAA,QACtD,MAAM,IAAI,OAAO,MAAM,gBAAgB,IAAI,OAAO,MAAM,OAAO,SAAS,IAAI,OAAO,MAAM,OAAO,QAAQ;AAAA,QACxG,MAAM,IAAI,OAAO,MAAM,OAAO,QAAQ,IAAI,OAAO,MAAM,OAAO,QAAQ;AAAA,MACxE;AAAA,MACA,WAAW;AAAA,QACT,IAAI,IAAI,OAAO,MAAM,UAAU,IAAI,OAAO,MAAM,MAAM;AAAA,QACtD,MAAM,IAAI,OAAO,MAAM,gBAAgB,IAAI,OAAO,MAAM,OAAO,SAAS,IAAI,OAAO,MAAM,OAAO,QAAQ;AAAA,QACxG,MAAM,IAAI,OAAO,MAAM,OAAO,QAAQ,IAAI,OAAO,MAAM,OAAO,QAAQ;AAAA,MACxE;AAAA,MACA,YAAY,CAAC;AAAA,MACb,cAAc,CAAC;AAAA,MACf,cAAc,EAAE,iBAAiB,GAAG,oBAAoB,EAAE;AAAA,MAC1D,QAAQ,OAAO,GAAG;AAAA,IACpB;AAAA,EACF;AACF;AAxBS;AA0BT,SAAS,4BAA4B,IAAS;AAC5C,QAAM,UAAU,GAAG,WAAW,CAAC;AAC/B,QAAM,WAAW,GAAG,QAAQ,CAAC;AAE7B,QAAM,SAAgC,CAAC;AACvC,aAAW,SAAS,UAAU;AAC5B,UAAM,IAAI,SAAS,KAAK;AACxB,UAAM,MAAM,CAAC,EAAE,gBAAgB,IAAI,EAAE,UAAU,IAAI,EAAE,YAAY,IAAI,EAAE,aAAa,EAAE,EAAE,KAAK,GAAG;AAChG,KAAC,OAAO,GAAG,MAAM,CAAC,GAAG,KAAK,CAAC;AAAA,EAC7B;AAEA,MAAI,kBAAkB;AACtB,MAAI,qBAAqB;AAEzB,QAAM,cAAqB,CAAC;AAC5B,QAAM,YAAmB,CAAC;AAE1B,aAAW,OAAO,QAAQ;AACxB,UAAM,UAAU,OAAO,GAAG;AAC1B,UAAM,YAAY,QAAQ,KAAK,QAAM,CAAC,CAAC,GAAG,QAAQ;AAElD,QAAI,WAAW;AACb,YAAM,OAAO,0BAA0B,SAAS,OAAO;AACvD,UAAI,MAAM;AACR,oBAAY,KAAK,IAAI;AACrB;AAAA,MACF,OAAO;AACL;AAAA,MACF;AAAA,IACF,OAAO;AACL,YAAM,OAAO,wBAAwB,OAAO;AAC5C,UAAI;AAAM,kBAAU,KAAK,IAAI;AAAA,IAC/B;AAAA,EACF;AAEA,SAAO;AAAA,IACL,SAAS,GAAG;AAAA,IACZ,UAAU,GAAG;AAAA,IACb,YAAY,GAAG;AAAA,IACf,WAAW;AAAA,MACT,IAAI,GAAG,OAAO,MAAM,UAAU,GAAG,OAAO,MAAM,MAAM;AAAA,MACpD,MAAM,GAAG,OAAO,MAAM,gBAAgB,GAAG,OAAO,MAAM,OAAO,SAAS,GAAG,OAAO,MAAM,OAAO,QAAQ;AAAA,MACrG,MAAM,GAAG,OAAO,MAAM,OAAO,QAAQ,GAAG,OAAO,MAAM,OAAO,QAAQ;AAAA,IACtE;AAAA,IACA,WAAW;AAAA,MACT,IAAI,GAAG,OAAO,MAAM,UAAU,GAAG,OAAO,MAAM,MAAM;AAAA,MACpD,MAAM,GAAG,OAAO,MAAM,gBAAgB,GAAG,OAAO,MAAM,OAAO,SAAS,GAAG,OAAO,MAAM,OAAO,QAAQ;AAAA,MACrG,MAAM,GAAG,OAAO,MAAM,OAAO,QAAQ,GAAG,OAAO,MAAM,OAAO,QAAQ;AAAA,IACtE;AAAA,IACA,YAAY;AAAA,IACZ,cAAc;AAAA,IACd,cAAc,EAAE,iBAAiB,mBAAmB;AAAA,EACtD;AACF;AArDS;AAuDT,SAAS,0BAA0B,SAAgB,SAA8B;AAC/E,QAAM,OAAO,QAAQ,KAAK,OAAK,WAAW,EAAE,MAAM,CAAC;AACnD,QAAM,QAAQ,QAAQ,KAAK,OAAK,YAAY,EAAE,MAAM,CAAC;AACrD,QAAM,OAAO,QAAQ;AACrB,MAAI,CAAC;AAAM,WAAO;AAElB,QAAM,SAAS,KAAK,WAAW,QAAQ,KAAK,QAAQ,IAAI;AACxD,QAAM,aAAa,QAAQ,QAAQ,KAAK;AACxC,QAAM,aAAa,iBAAiB,KAAK,QAAQ,KAAK;AAEtD,QAAM,UACJ,MAAM,iBAAiB,OAAO,iBAAiB,MAAM,iBAAiB,OAAO,iBAAiB;AAChG,QAAM,OAAO,WAAW,SAAS,WAAW,OAAO,CAAC,IAAI,WAAW,OAAO,IAAI;AAE9E,QAAM,QAAe,CAAC;AAEtB,aAAW,QAAQ,CAAC,MAAM,KAAK,GAAG;AAChC,QAAI,CAAC;AAAM;AAGX,QAAI,KAAK,YAAY,KAAK,iBAAiB,KAAK,YAAY,KAAK,eAAe;AAC9E,YAAM,KAAK;AAAA,QACT,WAAW;AAAA,QACX,MAAM,OAAO,KAAK,MAAM,EAAE,YAAY;AAAA,QACtC,OAAO,KAAK,YAAY,KAAK,YAAY;AAAA,QACzC,MAAM,eAAe,KAAK,iBAAiB,KAAK,aAAa;AAAA,MAC/D,CAAC;AAAA,IACH;AAGA,eAAW,CAAC,MAAM,IAAI,KAAK,OAAO,QAAQ,KAAK,eAAe,CAAC,CAAC,GAAG;AACjE,YAAM,WAAW;AACjB,UAAI,CAAC,YAAa,CAAC,SAAS,QAAQ,CAAC,SAAS;AAAY;AAC1D,YAAM,KAAK;AAAA,QACT,WAAW;AAAA,QACX,MAAM,OAAO,KAAK,MAAM,EAAE,YAAY;AAAA,QACtC,OAAO,SAAS,QAAQ,KAAK,YAAY;AAAA,QACzC,MAAM,eAAe,SAAS,aAAa,KAAK,aAAa;AAAA,QAC7D,UAAU,SAAS;AAAA,MACrB,CAAC;AAAA,IACH;AAAA,EACF;AAGA,SAAO;AAAA,IACL,aAAa;AAAA,IACb,QAAQ,QAAQ,UAAU;AAAA,IAC1B,aAAa;AAAA,IACb;AAAA,IACA;AAAA,EACF;AACF;AAnDS;AAqDT,SAAS,wBAAwB,SAAgB;AAE/C,QAAM,OAAO,QAAQ,KAAK,OAAK,WAAW,EAAE,MAAM,CAAC;AACnD,QAAM,QAAQ,QAAQ,KAAK,OAAK,YAAY,EAAE,MAAM,CAAC;AACrD,QAAM,OAAO,QAAQ;AACrB,MAAI,CAAC;AAAM,WAAO;AAElB,QAAM,aAAa,KAAK;AACxB,QAAM,UACJ,MAAM,iBAAiB,OAAO,iBAAiB,MAAM,iBAAiB,OAAO,iBAAiB;AAChG,QAAM,OAAO,WAAW,SAAS,WAAW,OAAO,CAAC,IAAI,WAAW,OAAO,IAAI;AAE9E,QAAM,QAAe,CAAC;AAEtB,aAAW,QAAQ,CAAC,MAAM,KAAK,GAAG;AAChC,QAAI,CAAC;AAAM;AAEX,QAAI,KAAK,YAAY,KAAK,iBAAiB,KAAK,YAAY,KAAK,eAAe;AAC9E,YAAM,KAAK;AAAA,QACT,WAAW;AAAA,QACX,MAAM,OAAO,KAAK,MAAM,EAAE,YAAY;AAAA,QACtC,OAAO,KAAK,YAAY,KAAK,YAAY;AAAA,QACzC,MAAM,eAAe,KAAK,iBAAiB,KAAK,aAAa;AAAA,MAC/D,CAAC;AAAA,IACH;AACA,eAAW,CAAC,MAAM,IAAI,KAAK,OAAO,QAAQ,KAAK,eAAe,CAAC,CAAC,GAAG;AACjE,YAAM,WAAW;AACjB,UAAI,CAAC,YAAa,CAAC,SAAS,QAAQ,CAAC,SAAS;AAAY;AAC1D,YAAM,KAAK;AAAA,QACT,WAAW;AAAA,QACX,MAAM,OAAO,KAAK,MAAM,EAAE,YAAY;AAAA,QACtC,OAAO,SAAS,QAAQ,KAAK,YAAY;AAAA,QACzC,MAAM,eAAe,SAAS,aAAa,KAAK,aAAa;AAAA,QAC7D,UAAU,SAAS;AAAA,MACrB,CAAC;AAAA,IACH;AAAA,EACF;AAEA,SAAO;AAAA,IACL,aAAa;AAAA,IACb;AAAA,IACA;AAAA,EACF;AACF;AA3CS;AA+CT,eAAe,cAAc,KAAU,SAAkB,KAA6B;AAEpF,MAAI,IAAI,aAAa;AACnB,UAAM,aAAa,QAAQ,QAAQ,IAAI,eAAe;AACtD,QAAI,CAAC,cAAc,eAAe,UAAU,IAAI,eAAe;AAC7D,aAAO,IAAI,SAAS,gBAAgB,EAAE,QAAQ,IAAI,CAAC;AAAA,IACrD;AAAA,EACF;AAEA,QAAM,QAAQ,IAAI,aAAa,IAAI,OAAO,MAAM;AAEhD,MAAI;AACF,UAAM,UAAU,MAAM,WAAW,KAAK,KAAK;AAC3C,WAAO,IAAI,SAAS,KAAK,UAAU,OAAO,GAAG;AAAA,MAC3C,SAAS;AAAA,QACP,gBAAgB;AAAA,MAClB;AAAA,IACF,CAAC;AAAA,EACH,SAAS,OAAP;AACA,WAAO,IAAI,SAAS,KAAK,UAAU,EAAE,OAAO,wBAAwB,CAAC,GAAG;AAAA,MACtE,QAAQ;AAAA,MACR,SAAS;AAAA,QACP,gBAAgB;AAAA,MAClB;AAAA,IACF,CAAC;AAAA,EACH;AACF;AA1Be;AA4Bf,eAAe,WAAW,KAAU,QAAiB,OAAqB;AACxE,MAAI,CAAC,IAAI,SAAS;AAEhB,WAAO;AAAA,MACL,sBAAsB;AAAA,MACtB,yBAAyB;AAAA,MACzB,WAAW;AAAA,MACX,aAAa;AAAA,MACb,sBAAsB,EAAE,OAAO,GAAG,OAAO,GAAG,OAAO,EAAE;AAAA,MACrD,mBAAmB;AAAA,MACnB,eAAe;AAAA,MACf,cAAa,oBAAI,KAAK,GAAE,YAAY;AAAA,IACtC;AAAA,EACF;AAEA,QAAM,OAAO;AAAA,IACX;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AAEA,QAAM,SAAS,MAAM,QAAQ;AAAA,IAC3B,KAAK,IAAI,SAAO,IAAI,QAAS,IAAI,GAAG,EAAE,KAAK,OAAK,SAAS,KAAK,KAAK,EAAE,CAAC,CAAC;AAAA,EACzE;AAEA,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,IAAI;AAEJ,QAAM,UAAU;AAAA,IACd;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,sBAAsB;AAAA,MACpB,OAAO;AAAA,MACP,OAAO;AAAA,MACP,OAAO;AAAA,IACT;AAAA,IACA,mBAAmB,gBAAgB,IAAI,KAAK,MAAM,oBAAoB,aAAa,IAAI;AAAA,IACvF;AAAA,IACA,cAAa,oBAAI,KAAK,GAAE,YAAY;AAAA,EACtC;AAEA,MAAI,OAAO;AAET,UAAM,QAAQ,IAAI,KAAK,IAAI,SAAO,IAAI,QAAS,IAAI,KAAK,GAAG,CAAC,CAAC;AAAA,EAC/D;AAEA,SAAO;AACT;AAhEe;;;ACp0Cf,IAAM,YAAwB,8BAAO,SAAS,KAAK,MAAM,kBAAkB;AAC1E,MAAI;AACH,WAAO,MAAM,cAAc,KAAK,SAAS,GAAG;AAAA,EAC7C,UAAE;AACD,QAAI;AACH,UAAI,QAAQ,SAAS,QAAQ,CAAC,QAAQ,UAAU;AAC/C,cAAM,SAAS,QAAQ,KAAK,UAAU;AACtC,eAAO,EAAE,MAAM,OAAO,KAAK,GAAG,MAAM;AAAA,QAAC;AAAA,MACtC;AAAA,IACD,SAAS,GAAP;AACD,cAAQ,MAAM,4CAA4C,CAAC;AAAA,IAC5D;AAAA,EACD;AACD,GAb8B;AAe9B,IAAO,6CAAQ;;;ACRf,SAAS,YAAY,GAAmB;AACvC,SAAO;AAAA,IACN,MAAM,GAAG;AAAA,IACT,SAAS,GAAG,WAAW,OAAO,CAAC;AAAA,IAC/B,OAAO,GAAG;AAAA,IACV,OAAO,GAAG,UAAU,SAAY,SAAY,YAAY,EAAE,KAAK;AAAA,EAChE;AACD;AAPS;AAUT,IAAM,YAAwB,8BAAO,SAAS,KAAK,MAAM,kBAAkB;AAC1E,MAAI;AACH,WAAO,MAAM,cAAc,KAAK,SAAS,GAAG;AAAA,EAC7C,SAAS,GAAP;AACD,UAAM,QAAQ,YAAY,CAAC;AAC3B,WAAO,SAAS,KAAK,OAAO;AAAA,MAC3B,QAAQ;AAAA,MACR,SAAS,EAAE,+BAA+B,OAAO;AAAA,IAClD,CAAC;AAAA,EACF;AACD,GAV8B;AAY9B,IAAO,2CAAQ;;;ACzBJ,IAAM,mCAAmC;AAAA,EAE9B;AAAA,EAAyB;AAC3C;AACA,IAAO,sCAAQ;;;ACcnB,IAAM,wBAAsC,CAAC;AAKtC,SAAS,uBAAuB,MAAqC;AAC3E,wBAAsB,KAAK,GAAG,KAAK,KAAK,CAAC;AAC1C;AAFgB;AAShB,SAAS,uBACR,SACA,KACA,KACA,UACA,iBACsB;AACtB,QAAM,CAAC,MAAM,GAAG,IAAI,IAAI;AACxB,QAAM,gBAAmC;AAAA,IACxC;AAAA,IACA,KAAK,YAAY,QAAQ;AACxB,aAAO,uBAAuB,YAAY,QAAQ,KAAK,UAAU,IAAI;AAAA,IACtE;AAAA,EACD;AACA,SAAO,KAAK,SAAS,KAAK,KAAK,aAAa;AAC7C;AAfS;AAiBF,SAAS,kBACf,SACA,KACA,KACA,UACA,iBACsB;AACtB,SAAO,uBAAuB,SAAS,KAAK,KAAK,UAAU;AAAA,IAC1D,GAAG;AAAA,IACH;AAAA,EACD,CAAC;AACF;AAXgB;;;AC3ChB,IAAM,iCAAN,MAAoE;AAAA,EAGnE,YACU,eACA,MACT,SACC;AAHQ;AACA;AAGT,SAAK,WAAW;AAAA,EACjB;AAAA,EARS;AAAA,EAUT,UAAU;AACT,QAAI,EAAE,gBAAgB,iCAAiC;AACtD,YAAM,IAAI,UAAU,oBAAoB;AAAA,IACzC;AAEA,SAAK,SAAS;AAAA,EACf;AACD;AAlBM;AAoBN,SAAS,oBAAoB,QAA0C;AAEtE,MACC,qCAAqC,UACrC,iCAAiC,WAAW,GAC3C;AACD,WAAO;AAAA,EACR;AAEA,aAAW,cAAc,kCAAkC;AAC1D,wBAAoB,UAAU;AAAA,EAC/B;AAEA,QAAM,kBAA+C,gCACpD,SACA,KACA,KACC;AACD,QAAI,OAAO,UAAU,QAAW;AAC/B,YAAM,IAAI,MAAM,6CAA6C;AAAA,IAC9D;AACA,WAAO,OAAO,MAAM,SAAS,KAAK,GAAG;AAAA,EACtC,GATqD;AAWrD,SAAO;AAAA,IACN,GAAG;AAAA,IACH,MAAM,SAAS,KAAK,KAAK;AACxB,YAAM,aAAyB,gCAAU,MAAM,MAAM;AACpD,YAAI,SAAS,eAAe,OAAO,cAAc,QAAW;AAC3D,gBAAM,aAAa,IAAI;AAAA,YACtB,KAAK,IAAI;AAAA,YACT,KAAK,QAAQ;AAAA,YACb,MAAM;AAAA,YAAC;AAAA,UACR;AACA,iBAAO,OAAO,UAAU,YAAY,KAAK,GAAG;AAAA,QAC7C;AAAA,MACD,GAT+B;AAU/B,aAAO,kBAAkB,SAAS,KAAK,KAAK,YAAY,eAAe;AAAA,IACxE;AAAA,EACD;AACD;AAxCS;AA0CT,SAAS,qBACR,OAC8B;AAE9B,MACC,qCAAqC,UACrC,iCAAiC,WAAW,GAC3C;AACD,WAAO;AAAA,EACR;AAEA,aAAW,cAAc,kCAAkC;AAC1D,wBAAoB,UAAU;AAAA,EAC/B;AAGA,SAAO,cAAc,MAAM;AAAA,IAC1B,mBAAyE,CACxE,SACA,KACA,QACI;AACJ,WAAK,MAAM;AACX,WAAK,MAAM;AACX,UAAI,MAAM,UAAU,QAAW;AAC9B,cAAM,IAAI,MAAM,sDAAsD;AAAA,MACvE;AACA,aAAO,MAAM,MAAM,OAAO;AAAA,IAC3B;AAAA,IAEA,cAA0B,CAAC,MAAM,SAAS;AACzC,UAAI,SAAS,eAAe,MAAM,cAAc,QAAW;AAC1D,cAAM,aAAa,IAAI;AAAA,UACtB,KAAK,IAAI;AAAA,UACT,KAAK,QAAQ;AAAA,UACb,MAAM;AAAA,UAAC;AAAA,QACR;AACA,eAAO,MAAM,UAAU,UAAU;AAAA,MAClC;AAAA,IACD;AAAA,IAEA,MAAM,SAAwD;AAC7D,aAAO;AAAA,QACN;AAAA,QACA,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,QACL,KAAK;AAAA,MACN;AAAA,IACD;AAAA,EACD;AACD;AAnDS;AAqDT,IAAI;AACJ,IAAI,OAAO,wCAAU,UAAU;AAC9B,kBAAgB,oBAAoB,mCAAK;AAC1C,WAAW,OAAO,wCAAU,YAAY;AACvC,kBAAgB,qBAAqB,mCAAK;AAC3C;AACA,IAAO,kCAAQ;",
  "names": []
}
